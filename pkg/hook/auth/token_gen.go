package auth

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Token) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "i":
			z.IssuedOn, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "IssuedOn")
				return
			}
		case "e":
			z.ExpiresOn, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExpiresOn")
				return
			}
		case "d":
			z.Data, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Token) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "u"
	err = en.Append(0x84, 0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteTime(z.IssuedOn)
	if err != nil {
		err = msgp.WrapError(err, "IssuedOn")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExpiresOn)
	if err != nil {
		err = msgp.WrapError(err, "ExpiresOn")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Token) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "u"
	o = append(o, 0x84, 0xa1, 0x75)
	o = msgp.AppendString(o, z.UserID)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendTime(o, z.IssuedOn)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendTime(o, z.ExpiresOn)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o, err = msgp.AppendIntf(o, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Token) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "i":
			z.IssuedOn, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IssuedOn")
				return
			}
		case "e":
			z.ExpiresOn, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpiresOn")
				return
			}
		case "d":
			z.Data, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Token) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.UserID) + 2 + msgp.TimeSize + 2 + msgp.TimeSize + 2 + msgp.GuessSize(z.Data)
	return
}
