package call

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ArgDataArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ArgDataArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ArgDataArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ArgDataArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ArgDataArg) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ArgRetDataArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ArgRetDataArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ArgRetDataArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendFloat64(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ArgRetDataArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ArgRetDataArg) Msgsize() (s int) {
	s = 1 + 5 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ArgRetDataRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data1":
			z.Data1, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Data1")
				return
			}
		case "Data2":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data2")
				return
			}
			if cap(z.Data2) >= int(zb0002) {
				z.Data2 = (z.Data2)[:zb0002]
			} else {
				z.Data2 = make([]map[string][]bool, zb0002)
			}
			for za0001 := range z.Data2 {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Data2", za0001)
					return
				}
				if z.Data2[za0001] == nil {
					z.Data2[za0001] = make(map[string][]bool, zb0003)
				} else if len(z.Data2[za0001]) > 0 {
					for key := range z.Data2[za0001] {
						delete(z.Data2[za0001], key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0002 string
					var za0003 []bool
					za0002, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Data2", za0001)
						return
					}
					var zb0004 uint32
					zb0004, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Data2", za0001, za0002)
						return
					}
					if cap(za0003) >= int(zb0004) {
						za0003 = (za0003)[:zb0004]
					} else {
						za0003 = make([]bool, zb0004)
					}
					for za0004 := range za0003 {
						za0003[za0004], err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "Data2", za0001, za0002, za0004)
							return
						}
					}
					z.Data2[za0001][za0002] = za0003
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ArgRetDataRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Data1"
	err = en.Append(0x82, 0xa5, 0x44, 0x61, 0x74, 0x61, 0x31)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Data1)
	if err != nil {
		err = msgp.WrapError(err, "Data1")
		return
	}
	// write "Data2"
	err = en.Append(0xa5, 0x44, 0x61, 0x74, 0x61, 0x32)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Data2)))
	if err != nil {
		err = msgp.WrapError(err, "Data2")
		return
	}
	for za0001 := range z.Data2 {
		err = en.WriteMapHeader(uint32(len(z.Data2[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Data2", za0001)
			return
		}
		for za0002, za0003 := range z.Data2[za0001] {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Data2", za0001)
				return
			}
			err = en.WriteArrayHeader(uint32(len(za0003)))
			if err != nil {
				err = msgp.WrapError(err, "Data2", za0001, za0002)
				return
			}
			for za0004 := range za0003 {
				err = en.WriteBool(za0003[za0004])
				if err != nil {
					err = msgp.WrapError(err, "Data2", za0001, za0002, za0004)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ArgRetDataRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Data1"
	o = append(o, 0x82, 0xa5, 0x44, 0x61, 0x74, 0x61, 0x31)
	o = msgp.AppendTime(o, z.Data1)
	// string "Data2"
	o = append(o, 0xa5, 0x44, 0x61, 0x74, 0x61, 0x32)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Data2)))
	for za0001 := range z.Data2 {
		o = msgp.AppendMapHeader(o, uint32(len(z.Data2[za0001])))
		for za0002, za0003 := range z.Data2[za0001] {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendArrayHeader(o, uint32(len(za0003)))
			for za0004 := range za0003 {
				o = msgp.AppendBool(o, za0003[za0004])
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ArgRetDataRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data1":
			z.Data1, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data1")
				return
			}
		case "Data2":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data2")
				return
			}
			if cap(z.Data2) >= int(zb0002) {
				z.Data2 = (z.Data2)[:zb0002]
			} else {
				z.Data2 = make([]map[string][]bool, zb0002)
			}
			for za0001 := range z.Data2 {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data2", za0001)
					return
				}
				if z.Data2[za0001] == nil {
					z.Data2[za0001] = make(map[string][]bool, zb0003)
				} else if len(z.Data2[za0001]) > 0 {
					for key := range z.Data2[za0001] {
						delete(z.Data2[za0001], key)
					}
				}
				for zb0003 > 0 {
					var za0002 string
					var za0003 []bool
					zb0003--
					za0002, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data2", za0001)
						return
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data2", za0001, za0002)
						return
					}
					if cap(za0003) >= int(zb0004) {
						za0003 = (za0003)[:zb0004]
					} else {
						za0003 = make([]bool, zb0004)
					}
					for za0004 := range za0003 {
						za0003[za0004], bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Data2", za0001, za0002, za0004)
							return
						}
					}
					z.Data2[za0001][za0002] = za0003
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ArgRetDataRet) Msgsize() (s int) {
	s = 1 + 6 + msgp.TimeSize + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Data2 {
		s += msgp.MapHeaderSize
		if z.Data2[za0001] != nil {
			for za0002, za0003 := range z.Data2[za0001] {
				_ = za0003
				s += msgp.StringPrefixSize + len(za0002) + msgp.ArrayHeaderSize + (len(za0003) * (msgp.BoolSize))
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RetDataRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string][]int, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []int
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]int, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001, za0003)
						return
					}
				}
				z.Data[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RetDataRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0001, za0002 := range z.Data {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001)
			return
		}
		for za0003 := range za0002 {
			err = en.WriteInt(za0002[za0003])
			if err != nil {
				err = msgp.WrapError(err, "Data", za0001, za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RetDataRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Data)))
	for za0001, za0002 := range z.Data {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendInt(o, za0002[za0003])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RetDataRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string][]int, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []int
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]int, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001, za0003)
						return
					}
				}
				z.Data[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RetDataRet) Msgsize() (s int) {
	s = 1 + 5 + msgp.MapHeaderSize
	if z.Data != nil {
		for za0001, za0002 := range z.Data {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize + (len(za0002) * (msgp.IntSize))
		}
	}
	return
}
