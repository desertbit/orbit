/*
 * ORBIT - Interlink Remote Applications
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roland Singer <roland.singer[at]desertbit.com>
 * Copyright (c) 2019 Sebastian Borchers <sebastian[at]desertbit.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package gen

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/desertbit/orbit/internal/parse"
)

const (
	orbitSuffix = ".orbit"
	genSuffix   = "_gen.go"
)

func Generate(dir string) (err error) {
	// Search the orbit file in the dir.
	info, err := ioutil.ReadDir(dir)
	if err != nil {
		return
	}

	var fileName string
	for _, fi := range info {
		if !fi.Mode().IsRegular() || !strings.HasSuffix(fi.Name(), orbitSuffix) {
			continue
		}

		fileName = fi.Name()
		break
	}

	if fileName == "" {
		return
	}

	// Parse the file.
	var (
		services []*parse.Service
		types    map[string]*parse.StructType

		path = filepath.Join(dir, fileName)
		s    = strings.Builder{}
	)
	services, types, err = parse.Parse(path)
	if err != nil {
		err = fmt.Errorf("could not parse %s: %v", path, err)
		return
	}

	// Write the preamble.
	s.WriteString(fmt.Sprintf("/* code generated by orbit */\npackage %s\n", filepath.Base(dir)))

	// Create the new file.
	f, err := os.Create(filepath.Join(dir, strings.TrimSuffix(fileName, orbitSuffix)+genSuffix))
	if err != nil {
		return
	}
	defer f.Close()
}

func genType(s *strings.Builder, t parse.Type) {
	switch v := t.(type) {
	case *parse.StructType:
		s.WriteString("struct {\n\t")
		for _, f := range v.Fields {
			s.WriteString(fmt.Sprintf("%s ", f.Name))
			genType(s, f.Type)
		}
		s.WriteString("}\n")
	case *parse.MapType:
		s.WriteString("map[")
		genType(s, v.Key)
		s.WriteString("]")
		genType(s, v.Value)
	case *parse.ArrType:
		s.WriteString("[]")
		genType(s, v.ElemType)
	case *parse.BaseType:

	}

	for _, t := range types {

	}
}

func write(f *os.File, format string, args ...interface{}) error {
	_, err := f.WriteString(fmt.Sprintf(format, args...))
	return err
}
