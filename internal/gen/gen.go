/*
 * ORBIT - Interlink Remote Applications
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roland Singer <roland.singer[at]desertbit.com>
 * Copyright (c) 2019 Sebastian Borchers <sebastian[at]desertbit.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package gen

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"sort"
	"strings"

	"github.com/desertbit/orbit/internal/parse"
	"github.com/desertbit/orbit/internal/utils"
)

const (
	OrbitSuffix = ".orbit"

	filePerm  = 0644
	genSuffix = "_gen.go"
	recv      = "v1"
)

func Generate(filePath string) (err error) {
	// Read the file.
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return
	}

	// Parse the file data.
	errs, services, types, err := parse.Parse(string(data))
	if err != nil {
		err = fmt.Errorf("could not parse %s: %v", filePath, err)
		return
	}

	// Create generator.
	g := newGenerator()

	// Add imports that we always need.
	g.imps.Add("github.com/desertbit/orbit/internal/control")

	// Sort the types in alphabetical order.
	sort.Slice(types, func(i, j int) bool {
		return types[i].Name < types[j].Name
	})

	// Generate the errors.
	g.genErrors(errs)

	// Generate the type definitions.
	g.genStructTypes(types)

	// Generate the service definitions.
	g.genServices(services, errs)

	// Write the preamble.
	var code string
	dir := filepath.Dir(filePath)
	code += fmt.Sprintf("/* code generated by orbit */\npackage %s\n\n", filepath.Base(dir))

	// Write the imports.
	if len(g.imps) > 0 {
		code += "import (\n"
		for imp := range g.imps {
			code += "\t\"" + imp + "\"\n"
		}
		code += ")\n\n"
	}

	// Write the contents to the file.
	return ioutil.WriteFile(
		filepath.Join(dir, strings.TrimSuffix(filepath.Base(filePath), OrbitSuffix)+genSuffix),
		[]byte(code+g.s.String()),
		filePerm,
	)
}

type generator struct {
	s           strings.Builder
	ind         int
	writeIndent bool
	imps        imports
}

func newGenerator() *generator {
	return &generator{
		imps: newImports(),
	}
}

func (g *generator) genErrors(errs []*parse.Error) {
	g.writeLn("//##############//")
	g.writeLn("//### Errors ###//")
	g.writeLn("//##############//")
	g.writeLn("")

	if len(errs) == 0 {
		return
	}

	// Add import.
	g.imps.Add("errors")

	// Open const block.
	g.writeLn("const (")
	g.indent(func() {
		// Write error codes.
		for _, e := range errs {
			g.writeLn("ErrCode%s = %d", e.Name, e.ID)
		}
	})
	// Close const block.
	g.writeLn(")")

	// Open var block.
	g.writeLn("var (")
	g.indent(func() {
		// Write standard error variables along with the orbit control.ErrorCode ones.
		for _, e := range errs {
			g.writeLn("Err%s = errors.New(\"%s\")", e.Name, strExplode(e.Name))
			g.writeLn("orbitErr%s = control.Err(", e.Name)
			g.indent(func() {
				g.writeLn("Err%s,", e.Name)
				g.writeLn("Err%s.Error(),", e.Name)
				g.writeLn("ErrCode%s,", e.Name)
			})
			g.writeLn(")")
			g.writeLn("")
		}
	})
	// Close var block.
	g.writeLn(")")
	g.writeLn("")
}

func (g *generator) genStructTypes(ts []*parse.StructType) {
	g.writeLn("//#############//")
	g.writeLn("//### Types ###//")
	g.writeLn("//#############//")
	g.writeLn("")

	for _, t := range ts {
		// Sort its fields in alphabetical order.
		sort.Slice(t.Fields, func(i, j int) bool {
			return t.Fields[i].Name < t.Fields[j].Name
		})

		g.writeLn("type %s struct {", t.Name)
		g.indent(func() {
			for _, f := range t.Fields {
				g.write("%s ", f.Name)
				g.genType(f.Type)
				g.writeLn("")
			}
		})
		g.writeLn("}")
		g.writeLn("")
	}
}

func (g *generator) genType(t parse.Type) {
	switch v := t.(type) {
	case *parse.StructType:
		// Structs just require a reference.
		g.write("*%s", v.Name)
	case *parse.MapType:
		g.write("map[")
		// Generate Key type.
		g.genType(v.Key)
		g.write("]")
		// Generate Value type.
		g.genType(v.Value)
	case *parse.ArrType:
		g.write("[]")
		// Generate Elem type.
		g.genType(v.ElemType)
	case *parse.BaseType:
		dt := v.DataType()

		// Check, if an import is needed.
		if dt == parse.TypeTime {
			g.imps.Add("time")
			g.write("time.Time")
		} else {
			g.write(dt)
		}
	}
}

func (g *generator) genServices(services []*parse.Service, errs []*parse.Error) {
	g.writeLn("//################//")
	g.writeLn("//### Services ###//")
	g.writeLn("//################//")
	g.writeLn("")

	for _, srvc := range services {
		g.genService(srvc, errs)
	}
}

func (g *generator) genService(srvc *parse.Service, errs []*parse.Error) {
	g.writeLn("// %s  ---------------------", srvc.Name)

	var (
		calls      = make([]*parse.Call, 0)
		revCalls   = make([]*parse.Call, 0)
		streams    = make([]*parse.Stream, 0)
		revStreams = make([]*parse.Stream, 0)
	)

	// Sort the entries into the respective categories.
	// Also create the call ids.
	g.writeLn("const (")
	g.indent(func() {
		for _, e := range srvc.Entries {
			g.writeLn("%s = \"%s\"", srvc.Name+e.Name(), srvc.Name+e.Name())
			switch v := e.(type) {
			case *parse.Call:
				if v.Rev() {
					revCalls = append(revCalls, v)
				} else {
					calls = append(calls, v)
				}
			case *parse.Stream:
				if v.Rev() {
					revStreams = append(revStreams, v)
				} else {
					streams = append(streams, v)
				}
			}
		}
	})
	g.writeLn(")")
	g.writeLn("")

	// Imports!
	if len(streams) > 0 || len(revStreams) > 0 {
		g.imps.Add("net")
	}

	// Create the interfaces.
	g.genServiceInterface("ConsumerCaller", srvc.Name, calls, streams)
	g.genServiceInterface("ConsumerHandler", srvc.Name, revCalls, revStreams)
	g.genServiceInterface("ProviderCaller", srvc.Name, revCalls, revStreams)
	g.genServiceInterface("ProviderHandler", srvc.Name, calls, streams)

	// Create the private structs implementing the caller interfaces and providing the orbit handlers.
	g.genServiceStruct("Consumer", srvc.Name, calls, revCalls, streams, revStreams, errs)
	g.genServiceStruct("Provider", srvc.Name, revCalls, calls, revStreams, streams, errs)

	g.writeLn("// ---------------------\n")
	g.writeLn("")
	return
}

func (g *generator) genServiceInterface(name, srvcName string, calls []*parse.Call, streams []*parse.Stream) {
	g.writeLn("type %s interface {", srvcName+name)
	g.indent(func() {
		g.writeLn("// Calls")
		for _, c := range calls {
			g.genServiceCallSignature(c)
			g.writeLn("")
		}
		g.writeLn("// Streams")
		for _, s := range streams {
			g.genServiceStreamSignature(s)
			g.writeLn("")
		}
	})
	g.writeLn("}")
	g.write("")
}

func (g *generator) genServiceStruct(
	name, srvcName string,
	calls, revCalls []*parse.Call,
	streams, revStreams []*parse.Stream,
	errs []*parse.Error,
) {
	// One service has one control for all normal calls.
	// But every async call gets its own control.
	numControls := 1
	for _, c := range calls {
		if c.Async {
			numControls++
		}
	}

	// Write struct.
	strName := utils.ToLowerFirst(srvcName + name)
	g.writeLn("type %s struct {", strName)

	g.indent(func() {
		g.writeLn("h %sHandler", srvcName+name)
		g.writeLn("ctrls [%d]*control.Control", numControls)
	})

	g.writeLn("}")
	g.writeLn("")

	// Generate the calls.
	asyncCount := 1
	for _, c := range calls {
		ctrlIndex := 0

		if c.Async {
			ctrlIndex = asyncCount
			asyncCount++
		}

		g.genServiceCall(c, strName, srvcName, ctrlIndex, errs)
	}

	// Generate the rev calls.
	for _, rc := range revCalls {
		g.genServiceCallOrbitHandler(rc, strName, errs)
	}

	// Generate the streams.
	for _, s := range streams {
		g.genServiceStream(s, strName, srvcName, errs)
	}
}

func (g *generator) genServiceCall(c *parse.Call, structName, srvcName string, ctrlIndex int, errs []*parse.Error) {
	// Method declaration.
	g.write("func (%s *%s) ", recv, structName)
	g.genServiceCallSignature(c)
	g.writeLn(" {")
	g.indent(func() {
		// Method body.
		// First, make the call.
		if c.Ret != nil {
			g.write("ctx, err := ")
		} else {
			g.write("_, err = ")
		}
		g.write("%s.ctrls[%d].Call(%s, ", recv, ctrlIndex, srvcName+c.Name())
		if c.Args != nil {
			g.writeLn("args)")
		} else {
			g.writeLn("nil)")
		}

		// Check error and parse control.ErrorCodes.
		g.writeErrCheckOrbitCaller(errs)

		// If return arguments are expected, decode them.
		if c.Ret != nil {
			g.writeLn("err = ctx.Decode(ret)")
			g.writeErrCheck()
		}

		// Return.
		g.writeLn("return")
	})
	g.writeLn("}")
	g.writeLn("")
}

func (g *generator) genServiceCallOrbitHandler(c *parse.Call, structName string, errs []*parse.Error) {
	// Method declaration.
	g.writeLn(
		"func (%s *%s) %s(ctx *control.Context) (v interface{}, err error) {",
		recv, structName, utils.ToLowerFirst(c.Name()),
	)
	g.indent(func() {
		// Method body.
		// Parse the args.
		handlerArgs := ""
		if c.Args != nil {
			handlerArgs = "args"
			g.writeLn("var args *%s", c.Args.Type.Name)
			g.writeLn("err = ctx.Decode(args)")
			g.writeErrCheck()
		}

		// Call the handler.
		if c.Ret != nil {
			g.writeLn("ret, err := %s.h.%s(%s)", recv, c.Name(), handlerArgs)
		} else {
			g.writeLn("err = %s.h.%s(%s)", recv, c.Name(), handlerArgs)
		}

		// Check error and convert to orbit errors.
		g.writeErrCheckOrbitHandler(errs)

		// Assign return value.
		if c.Ret != nil {
			g.writeLn("v = ret")
		}

		// Return.
		g.writeLn("return")
	})
	g.writeLn("}")
	g.writeLn("")
}

func (g *generator) genServiceCallSignature(c *parse.Call) {
	g.write("%s(", c.Name())
	if c.Args != nil {
		g.write("args *%s", c.Args.Type.Name)
	}
	g.write(") (")
	if c.Ret != nil {
		g.write("ret *%s, ", c.Ret.Type.Name)
	}
	g.write("err error)")
}

func (g *generator) genServiceStream(s *parse.Stream, structName, srvcName string, errs []*parse.Error) {
	// Method declaration.
	g.write("func (%s *%s) ", recv, structName)
	g.genServiceStreamSignature(s)
	g.writeLn(" {")
	g.indent(func() {
		// Method body.
		// First, make the call.
		/*if c.Ret != nil {
			g.write("ctx, err := ")
		} else {
			g.write("_, err = ")
		}
		g.write("%s.ctrls[%d].Call(%s, ", recv, ctrlIndex, c.Name())
		if c.Args != nil {
			g.writeLn("args)")
		} else {
			g.writeLn("nil)")
		}

		// Check error and parse control.ErrorCodes.
		g.writeErrCheckOrbitCaller(errs)

		// If return arguments are expected, decode them.
		if c.Ret != nil {
			g.writeLn("err = ctx.Decode(ret)")
			g.writeErrCheck()
		}

		// Return.
		g.writeLn("return")*/
	})
	g.writeLn("}")
	g.writeLn("")
}

func (g *generator) genServiceStreamSignature(s *parse.Stream) {
	g.write("%s(", s.Name())
	if s.Args != nil {
		g.write("args <-chan *%s", s.Args.Type.Name)
	}
	g.write(") (")
	if s.Ret != nil {
		g.write("ret <-chan *%s, ", s.Ret.Type.Name)
	} else if s.Args == nil {
		g.write("conn net.Conn, ")
	}
	g.write("err error)")
}

func (g *generator) writeErrCheck() {
	g.writeLn("if err != nil {")
	g.indent(func() {
		g.writeLn("return")
	})
	g.writeLn("}")
}

func (g *generator) writeErrCheckOrbitCaller(errs []*parse.Error) {
	g.writeLn("if err != nil {")
	g.indent(func() {
		// Check, if a control.ErrorCode has been returned.
		if len(errs) > 0 {
			g.imps.Add("errors")

			g.writeLn("var cErr *control.ErrorCode")
			g.writeLn("if errors.As(err, &cErr) {")
			g.indent(func() {
				g.writeLn("switch cErr.Code {")
				for _, e := range errs {
					g.writeLn("case %d:", e.ID)
					g.indent(func() {
						g.writeLn("err = Err%s", e.Name)
					})
				}
				g.writeLn("}")
			})
			g.writeLn("}")
		}
		g.writeLn("return")
	})
	g.writeLn("}")
}

func (g *generator) writeErrCheckOrbitHandler(errs []*parse.Error) {
	g.writeLn("if err != nil {")
	g.indent(func() {
		// Check, if a api error has been returned and convert it to a control.ErrorCode.
		if len(errs) > 0 {
			g.imps.Add("errors")

			for i, e := range errs {
				g.writeLn("if errors.Is(err, Err%s) {", e.Name)
				g.indent(func() {
					g.writeLn("err = orbitErr%s", e.Name)
				})
				if i < len(errs)-1 {
					g.write("} else ")
				} else {
					g.writeLn("}")
				}
			}
		}
		g.writeLn("return")
	})
	g.writeLn("}")
}

func (g *generator) indent(f func()) {
	g.ind++
	f()
	g.ind--
}

func (g *generator) writeLn(format string, a ...interface{}) {
	g.write(format, a...)
	g.s.WriteString("\n")
	g.writeIndent = true
}

func (g *generator) write(format string, a ...interface{}) {
	if g.writeIndent {
		for i := 0; i < g.ind; i++ {
			g.s.WriteString("\t")
		}
		g.writeIndent = false
	}

	if len(a) == 0 {
		g.s.WriteString(format)
		return
	}

	g.s.WriteString(fmt.Sprintf(format, a...))
}
