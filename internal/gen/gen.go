/*
 * ORBIT - Interlink Remote Applications
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roland Singer <roland.singer[at]desertbit.com>
 * Copyright (c) 2019 Sebastian Borchers <sebastian[at]desertbit.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package gen

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/desertbit/orbit/internal/parse"
)

const (
	OrbitSuffix = ".orbit"

	filePerm  = 0644
	genSuffix = "_gen.go"
	recv      = "v1"
)

func Generate(filePath string, streamChanSize uint) (err error) {
	// Read the file.
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return
	}

	// Parse the file data.
	errs, services, types, err := parse.Parse(string(data))
	if err != nil {
		err = fmt.Errorf("could not parse %s\n-> %v", filePath, err)
		return
	}

	// Create generator.
	g := &generator{}

	// Generate the errors.
	g.genErrors(errs)

	// Generate the type definitions.
	g.genTypes(types, services, streamChanSize)

	// Generate the service definitions.
	g.genServices(services, errs)

	// Write the preamble.
	var code string
	dir := filepath.Dir(filePath)
	code += fmt.Sprintf("/* code generated by orbit */\npackage %s\n\n", filepath.Base(dir))

	// Write the imports.
	imports := []string{
		"context",
		"errors",
		"net",
		"time",
		"sync",
		"github.com/desertbit/orbit/pkg/orbit",
		"github.com/desertbit/orbit/internal/packet",
		"github.com/desertbit/closer/v3",
	}
	code += "import (\n"
	for _, imp := range imports {
		code += "\t\"" + imp + "\"\n"
	}
	code += ")\n\n"

	// Write the contents to the file.
	goFilePath := filepath.Join(dir, strings.TrimSuffix(filepath.Base(filePath), OrbitSuffix)+genSuffix)
	err = ioutil.WriteFile(goFilePath, []byte(code+g.s.String()), filePerm)
	if err != nil {
		return
	}

	// Exec goimports.
	return execCmd("goimports", "-w", goFilePath)
}

func execCmd(name string, args ...string) (err error) {
	cmd := exec.Command(name, args...)
	err = cmd.Run()
	if err != nil {
		var eErr *exec.ExitError
		if errors.As(err, &eErr) {
			err = fmt.Errorf("%s: %v", name, string(eErr.Stderr))
		}
		return
	}
	return
}

type generator struct {
	s strings.Builder
}

func (g *generator) errIfNil() {
	g.writeLn("if err != nil { return }")
}

func (g *generator) writeLn(format string, a ...interface{}) {
	g.write(format, a...)
	g.s.WriteString("\n")
}

func (g *generator) write(format string, a ...interface{}) {
	if len(a) == 0 {
		g.s.WriteString(format)
		return
	}

	g.s.WriteString(fmt.Sprintf(format, a...))
}
