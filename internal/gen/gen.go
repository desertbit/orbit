/*
 * ORBIT - Interlink Remote Applications
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roland Singer <roland.singer[at]desertbit.com>
 * Copyright (c) 2019 Sebastian Borchers <sebastian[at]desertbit.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package gen

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"sort"
	"strings"

	"github.com/desertbit/orbit/internal/parse"
)

const (
	OrbitSuffix = ".orbit"

	filePerm  = 0644
	genSuffix = "_gen.go"
)

func Generate(filePath string) (err error) {
	// Read the file.
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return
	}

	// Parse the file data.
	services, types, err := parse.Parse(string(data))
	if err != nil {
		err = fmt.Errorf("could not parse %s: %v", filePath, err)
		return
	}

	// Write the preamble.
	dir := filepath.Dir(filePath)
	s := strings.Builder{} // Errors from write methods can be safely ignored.
	s.WriteString(fmt.Sprintf("/* code generated by orbit */\npackage %s\n\n", filepath.Base(dir)))

	// Sort the types in alphabetical order.
	sort.Slice(types, func(i, j int) bool {
		return types[i].Name < types[j].Name
	})

	// Generate the type definitions.
	// Use a new builder, as we must first write the imports.
	s2 := strings.Builder{}
	imports := make(map[string]struct{})
	for _, t := range types {
		s2.WriteString("type " + t.Name + " ")
		genType(&s2, imports, t)
		s2.WriteString("\n\n")
	}

	// Write the imports.
	if len(imports) > 0 {
		s.WriteString("import (\n")
		for i := range imports {
			s.WriteString("\t\"" + i + "\"\n")
		}
		s.WriteString(")\n\n")
	}

	// Write the type definitions.
	s.WriteString("//#############//\n//### Types ###//\n//#############//\n\n")
	s.WriteString(s2.String())

	// Generate the service definitions.
	s.WriteString("//################//\n//### Services ###//\n//################//\n\n")
	for _, srvc := range services {
		genService(&s, srvc)
	}

	// Write the contents to the file.
	return ioutil.WriteFile(
		filepath.Join(dir, strings.TrimSuffix(filepath.Base(filePath), OrbitSuffix)+genSuffix),
		[]byte(s.String()),
		filePerm,
	)
}

func genType(s *strings.Builder, imports map[string]struct{}, t parse.Type) {
	switch v := t.(type) {
	case *parse.StructType:
		// Sort its fields in alphabetical order.
		sort.Slice(v.Fields, func(i, j int) bool {
			return v.Fields[i].Name < v.Fields[j].Name
		})

		s.WriteString("struct {\n")
		for _, f := range v.Fields {
			s.WriteString(fmt.Sprintf("\t%s ", f.Name))

			// Structs just require a reference.
			if st, ok := f.Type.(*parse.StructType); ok {
				s.WriteString("*" + st.Name + "\n")
			} else {
				genType(s, imports, f.Type)
				s.WriteString("\n")
			}
		}
		s.WriteString("}")
	case *parse.MapType:
		s.WriteString("map[")
		// Key type can not be a struct.
		genType(s, imports, v.Key)
		s.WriteString("]")
		// Structs just require a reference.
		if st, ok := v.Value.(*parse.StructType); ok {
			s.WriteString("*" + st.Name)
		} else {
			genType(s, imports, v.Value)
		}
	case *parse.ArrType:
		s.WriteString("[]")
		// Structs just require a reference.
		if st, ok := v.ElemType.(*parse.StructType); ok {
			s.WriteString("*" + st.Name)
		} else {
			genType(s, imports, v.ElemType)
		}
	case *parse.BaseType:
		dt := v.DataType()

		// Check, if an import is needed.
		if dt == parse.TypeTime {
			if _, ok := imports["time"]; !ok {
				imports["time"] = struct{}{}
			}
			s.WriteString("time.Time")
		} else {
			s.WriteString(dt)
		}
	}
}

func genService(s *strings.Builder, srvc *parse.Service) {

	return
}

func genCall(s *strings.Builder, c *parse.Call) {

}
