package api

// Code generated by github.com/desertbit/msgp DO NOT EDIT.

import (
	"github.com/desertbit/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CreateUserArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserName":
			z.UserName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateUserArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "UserName"
	err = en.Append(0x84, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserName)
	if err != nil {
		err = msgp.WrapError(err, "UserName")
		return
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "Email"
	err = en.Append(0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateUserArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "UserName"
	o = append(o, 0x84, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserName)
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "Email"
	o = append(o, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateUserArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserName":
			z.UserName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateUserArg) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.UserName) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 6 + msgp.StringPrefixSize + len(z.Email)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetUserArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GetUserArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "UserID"
	err = en.Append(0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GetUserArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "UserID"
	o = append(o, 0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetUserArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GetUserArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.UserID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetUserProfileImageArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GetUserProfileImageArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "UserID"
	err = en.Append(0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GetUserProfileImageArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "UserID"
	o = append(o, 0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetUserProfileImageArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GetUserProfileImageArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.UserID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetUserProfileImageRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Jpeg":
			z.Jpeg, err = dc.ReadBytes(z.Jpeg)
			if err != nil {
				err = msgp.WrapError(err, "Jpeg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GetUserProfileImageRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Jpeg"
	err = en.Append(0x81, 0xa4, 0x4a, 0x70, 0x65, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Jpeg)
	if err != nil {
		err = msgp.WrapError(err, "Jpeg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GetUserProfileImageRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Jpeg"
	o = append(o, 0x81, 0xa4, 0x4a, 0x70, 0x65, 0x67)
	o = msgp.AppendBytes(o, z.Jpeg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetUserProfileImageRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Jpeg":
			z.Jpeg, bts, err = msgp.ReadBytesBytes(bts, z.Jpeg)
			if err != nil {
				err = msgp.WrapError(err, "Jpeg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GetUserProfileImageRet) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Jpeg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetUsersArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AfterUserID":
			z.AfterUserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AfterUserID")
				return
			}
		case "Count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GetUsersArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "AfterUserID"
	err = en.Append(0x82, 0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.AfterUserID)
	if err != nil {
		err = msgp.WrapError(err, "AfterUserID")
		return
	}
	// write "Count"
	err = en.Append(0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GetUsersArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "AfterUserID"
	o = append(o, 0x82, 0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.AfterUserID)
	// string "Count"
	o = append(o, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetUsersArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AfterUserID":
			z.AfterUserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AfterUserID")
				return
			}
		case "Count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GetUsersArg) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.AfterUserID) + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetUsersRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Users":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Users")
				return
			}
			if cap(z.Users) >= int(zb0002) {
				z.Users = (z.Users)[:zb0002]
			} else {
				z.Users = make([]UserOverview, zb0002)
			}
			for za0001 := range z.Users {
				err = z.Users[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Users", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GetUsersRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Users"
	err = en.Append(0x81, 0xa5, 0x55, 0x73, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Users)))
	if err != nil {
		err = msgp.WrapError(err, "Users")
		return
	}
	for za0001 := range z.Users {
		err = z.Users[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Users", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GetUsersRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Users"
	o = append(o, 0x81, 0xa5, 0x55, 0x73, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Users)))
	for za0001 := range z.Users {
		o, err = z.Users[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Users", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetUsersRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Users":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Users")
				return
			}
			if cap(z.Users) >= int(zb0002) {
				z.Users = (z.Users)[:zb0002]
			} else {
				z.Users = make([]UserOverview, zb0002)
			}
			for za0001 := range z.Users {
				bts, err = z.Users[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Users", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GetUsersRet) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Users {
		s += z.Users[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LoginArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "User":
			z.User, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "User")
				return
			}
		case "Password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LoginArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "User"
	err = en.Append(0x82, 0xa4, 0x55, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.User)
	if err != nil {
		err = msgp.WrapError(err, "User")
		return
	}
	// write "Password"
	err = en.Append(0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LoginArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "User"
	o = append(o, 0x82, 0xa4, 0x55, 0x73, 0x65, 0x72)
	o = msgp.AppendString(o, z.User)
	// string "Password"
	o = append(o, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LoginArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "User":
			z.User, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "User")
				return
			}
		case "Password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LoginArg) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.User) + 9 + msgp.StringPrefixSize + len(z.Password)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Notification) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "ThumbnailJpeg":
			z.ThumbnailJpeg, err = dc.ReadBytes(z.ThumbnailJpeg)
			if err != nil {
				err = msgp.WrapError(err, "ThumbnailJpeg")
				return
			}
		case "Link":
			z.Link, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Notification) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Id"
	err = en.Append(0x85, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "ThumbnailJpeg"
	err = en.Append(0xad, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4a, 0x70, 0x65, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ThumbnailJpeg)
	if err != nil {
		err = msgp.WrapError(err, "ThumbnailJpeg")
		return
	}
	// write "Link"
	err = en.Append(0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Notification) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Id"
	o = append(o, 0x85, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "ThumbnailJpeg"
	o = append(o, 0xad, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4a, 0x70, 0x65, 0x67)
	o = msgp.AppendBytes(o, z.ThumbnailJpeg)
	// string "Link"
	o = append(o, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Notification) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "ThumbnailJpeg":
			z.ThumbnailJpeg, bts, err = msgp.ReadBytesBytes(bts, z.ThumbnailJpeg)
			if err != nil {
				err = msgp.WrapError(err, "ThumbnailJpeg")
				return
			}
		case "Link":
			z.Link, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Notification) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 6 + msgp.StringPrefixSize + len(z.Title) + 12 + msgp.StringPrefixSize + len(z.Description) + 14 + msgp.BytesPrefixSize + len(z.ThumbnailJpeg) + 5 + msgp.StringPrefixSize + len(z.Link)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObserveNotificationsArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ObserveNotificationsArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "UserID"
	err = en.Append(0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ObserveNotificationsArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "UserID"
	o = append(o, 0x81, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObserveNotificationsArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ObserveNotificationsArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.UserID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RegisterArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "Password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RegisterArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Email"
	err = en.Append(0x82, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	// write "Password"
	err = en.Append(0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RegisterArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Email"
	o = append(o, 0x82, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	// string "Password"
	o = append(o, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RegisterArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "Password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RegisterArg) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Email) + 9 + msgp.StringPrefixSize + len(z.Password)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UpdateUserArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "UserName":
			z.UserName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UpdateUserArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "UserID"
	err = en.Append(0x86, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "UserName"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserName)
	if err != nil {
		err = msgp.WrapError(err, "UserName")
		return
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Email"
	err = en.Append(0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UpdateUserArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "UserID"
	o = append(o, 0x86, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	// string "UserName"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserName)
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "Email"
	o = append(o, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UpdateUserArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "UserName":
			z.UserName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UpdateUserArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.UserID) + 9 + msgp.StringPrefixSize + len(z.UserName) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 7 + msgp.StringPrefixSize + len(z.Status) + 6 + msgp.StringPrefixSize + len(z.Email)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UpdateUserProfileImageArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "Jpeg":
			z.Jpeg, err = dc.ReadBytes(z.Jpeg)
			if err != nil {
				err = msgp.WrapError(err, "Jpeg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UpdateUserProfileImageArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "UserID"
	err = en.Append(0x82, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "Jpeg"
	err = en.Append(0xa4, 0x4a, 0x70, 0x65, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Jpeg)
	if err != nil {
		err = msgp.WrapError(err, "Jpeg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UpdateUserProfileImageArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "UserID"
	o = append(o, 0x82, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	// string "Jpeg"
	o = append(o, 0xa4, 0x4a, 0x70, 0x65, 0x67)
	o = msgp.AppendBytes(o, z.Jpeg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UpdateUserProfileImageArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UserID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "Jpeg":
			z.Jpeg, bts, err = msgp.ReadBytesBytes(bts, z.Jpeg)
			if err != nil {
				err = msgp.WrapError(err, "Jpeg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UpdateUserProfileImageArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.UserID) + 5 + msgp.BytesPrefixSize + len(z.Jpeg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserDetail) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Overview":
			err = z.Overview.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Overview")
				return
			}
		case "NumberPosts":
			z.NumberPosts, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumberPosts")
				return
			}
		case "NumberFollowing":
			z.NumberFollowing, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumberFollowing")
				return
			}
		case "NumberFriends":
			z.NumberFriends, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumberFriends")
				return
			}
		case "UserStatus":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "UserStatus")
					return
				}
				z.UserStatus = UserStatus(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserDetail) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Overview"
	err = en.Append(0x85, 0xa8, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77)
	if err != nil {
		return
	}
	err = z.Overview.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Overview")
		return
	}
	// write "NumberPosts"
	err = en.Append(0xab, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumberPosts)
	if err != nil {
		err = msgp.WrapError(err, "NumberPosts")
		return
	}
	// write "NumberFollowing"
	err = en.Append(0xaf, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumberFollowing)
	if err != nil {
		err = msgp.WrapError(err, "NumberFollowing")
		return
	}
	// write "NumberFriends"
	err = en.Append(0xad, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumberFriends)
	if err != nil {
		err = msgp.WrapError(err, "NumberFriends")
		return
	}
	// write "UserStatus"
	err = en.Append(0xaa, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.UserStatus))
	if err != nil {
		err = msgp.WrapError(err, "UserStatus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserDetail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Overview"
	o = append(o, 0x85, 0xa8, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77)
	o, err = z.Overview.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Overview")
		return
	}
	// string "NumberPosts"
	o = append(o, 0xab, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73)
	o = msgp.AppendInt(o, z.NumberPosts)
	// string "NumberFollowing"
	o = append(o, 0xaf, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt(o, z.NumberFollowing)
	// string "NumberFriends"
	o = append(o, 0xad, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73)
	o = msgp.AppendInt(o, z.NumberFriends)
	// string "UserStatus"
	o = append(o, 0xaa, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.UserStatus))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserDetail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Overview":
			bts, err = z.Overview.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Overview")
				return
			}
		case "NumberPosts":
			z.NumberPosts, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumberPosts")
				return
			}
		case "NumberFollowing":
			z.NumberFollowing, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumberFollowing")
				return
			}
		case "NumberFriends":
			z.NumberFriends, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumberFriends")
				return
			}
		case "UserStatus":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UserStatus")
					return
				}
				z.UserStatus = UserStatus(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserDetail) Msgsize() (s int) {
	s = 1 + 9 + z.Overview.Msgsize() + 12 + msgp.IntSize + 16 + msgp.IntSize + 14 + msgp.IntSize + 11 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserOverview) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "UserName":
			z.UserName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "JoinedOn":
			z.JoinedOn, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "JoinedOn")
				return
			}
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "NumberFollowers":
			z.NumberFollowers, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumberFollowers")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserOverview) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "UserName"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserName)
	if err != nil {
		err = msgp.WrapError(err, "UserName")
		return
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "JoinedOn"
	err = en.Append(0xa8, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteTime(z.JoinedOn)
	if err != nil {
		err = msgp.WrapError(err, "JoinedOn")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "NumberFollowers"
	err = en.Append(0xaf, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumberFollowers)
	if err != nil {
		err = msgp.WrapError(err, "NumberFollowers")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserOverview) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "UserName"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserName)
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "JoinedOn"
	o = append(o, 0xa8, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e)
	o = msgp.AppendTime(o, z.JoinedOn)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "NumberFollowers"
	o = append(o, 0xaf, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73)
	o = msgp.AppendInt(o, z.NumberFollowers)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserOverview) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "UserName":
			z.UserName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserName")
				return
			}
		case "FirstName":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "JoinedOn":
			z.JoinedOn, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JoinedOn")
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "NumberFollowers":
			z.NumberFollowers, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumberFollowers")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserOverview) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 9 + msgp.StringPrefixSize + len(z.UserName) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 9 + msgp.TimeSize + 7 + msgp.StringPrefixSize + len(z.Status) + 16 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UserStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UserStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UserStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UserStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UserStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
