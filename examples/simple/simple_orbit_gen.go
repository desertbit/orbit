/* code generated by orbit */
package simple

import (
	context "context"
	errors "errors"
	fmt "fmt"
	closer "github.com/desertbit/closer/v3"
	oclient "github.com/desertbit/orbit/pkg/client"
	codec "github.com/desertbit/orbit/pkg/codec"
	packet "github.com/desertbit/orbit/pkg/packet"
	oservice "github.com/desertbit/orbit/pkg/service"
	transport "github.com/desertbit/orbit/pkg/transport"
	validator "github.com/go-playground/validator/v10"
	io "io"
	net "net"
	strings "strings"
	sync "sync"
	time "time"
)

// Ensure that all imports are used.
var (
	_ context.Context
	_ = errors.New("")
	_ = fmt.Sprint()
	_ io.Closer
	_ net.Conn
	_ time.Time
	_ strings.Builder
	_ sync.Locker
	_ oclient.Client
	_ closer.Closer
	_ codec.Codec
	_ = packet.MaxSize
	_ oservice.Service
	_ transport.Transport
	_ validator.StructLevel
)

//### Msgp time duration shim ###//
// See https://github.com/desertbit/orbit/issues/50

//msgp:shim time.Duration as:int64 using:_encodeTimeDuration/_decodeTimeDuration
func _encodeTimeDuration(d time.Duration) int64 {
	return int64(d)
}
func _decodeTimeDuration(i int64) time.Duration {
	return time.Duration(i)
}

//##############//
//### Errors ###//
//##############//

var ErrClosed = errors.New("closed")

const (
	ErrCodeCustomErr1 = 1
	ErrCodeCustomErr2 = 2
)

var (
	ErrCustomErr1 = errors.New("custom err1")
	ErrCustomErr2 = errors.New("custom err2")
)

func _valErrCheck(err error) error {
	if vErrs, ok := err.(validator.ValidationErrors); ok {
		var errMsg strings.Builder
		for _, err := range vErrs {
			errMsg.WriteString(fmt.Sprintf("[name: '%s', value: '%s', tag: '%s']", err.StructNamespace(), err.Value(), err.Tag()))
		}
		return errors.New(errMsg.String())
	}
	return err
}

var validate = validator.New()

//#############//
//### Types ###//
//#############//

type MyCallArg struct {
	RequiredArg string `validate:"required"`
	OptionalArg int
}

type MyCallRet struct {
	Answer string `json:"Answer"`
}

type MyTypedStreamRet struct {
	Ok bool
}

type PersonInfo struct {
	Name        string `validate:"required,min=1"`
	Age         int    `validate:"required,min=1,max=155"`
	Locale      string `validate:"required,len=5"`
	Address     string `validate:"omitempty"`
	VehicleType Vehicle
}

//msgp:ignore MyTypedStreamClientStream
type MyTypedStreamClientStream struct {
	oclient.TypedStreamCloser
	stream oclient.TypedRWStream
}

func newMyTypedStreamClientStream(s oclient.TypedRWStream) *MyTypedStreamClientStream {
	return &MyTypedStreamClientStream{TypedStreamCloser: s, stream: s}
}

func (v1 *MyTypedStreamClientStream) Read() (ret MyTypedStreamRet, err error) {
	err = v1.stream.Read(&ret)
	if err != nil {
		if errors.Is(err, oclient.ErrClosed) {
			err = ErrClosed
			return
		}
		var cErr oclient.Error
		if errors.As(err, &cErr) {
			switch cErr.Code() {
			case ErrCodeCustomErr1:
				err = ErrCustomErr1
			case ErrCodeCustomErr2:
				err = ErrCustomErr2
			}
		}
		return
	}
	err = validate.Struct(ret)
	if err != nil {
		err = _valErrCheck(err)
		return
	}
	return
}

func (v1 *MyTypedStreamClientStream) Write(arg PersonInfo) (err error) {
	err = v1.stream.Write(arg)
	if err != nil {
		if errors.Is(err, oclient.ErrClosed) {
			err = ErrClosed
			return
		}
		var cErr oclient.Error
		if errors.As(err, &cErr) {
			switch cErr.Code() {
			case ErrCodeCustomErr1:
				err = ErrCustomErr1
			case ErrCodeCustomErr2:
				err = ErrCustomErr2
			}
		}
		return
	}
	return
}

//msgp:ignore MyTypedStreamServiceStream
type MyTypedStreamServiceStream struct {
	oservice.TypedStreamCloser
	stream oservice.TypedRWStream
}

func newMyTypedStreamServiceStream(s oservice.TypedRWStream) *MyTypedStreamServiceStream {
	return &MyTypedStreamServiceStream{TypedStreamCloser: s, stream: s}
}

func (v1 *MyTypedStreamServiceStream) Read() (arg PersonInfo, err error) {
	err = v1.stream.Read(&arg)
	if err != nil {
		if errors.Is(err, oservice.ErrClosed) {
			err = ErrClosed
			return
		}
		if errors.Is(err, ErrCustomErr1) {
			err = oservice.NewError(err, ErrCustomErr1.Error(), ErrCodeCustomErr1)
		} else if errors.Is(err, ErrCustomErr2) {
			err = oservice.NewError(err, ErrCustomErr2.Error(), ErrCodeCustomErr2)
		}
		return
	}
	err = validate.Struct(arg)
	if err != nil {
		err = _valErrCheck(err)
		return
	}
	return
}

func (v1 *MyTypedStreamServiceStream) Write(ret MyTypedStreamRet) (err error) {
	err = v1.stream.Write(ret)
	if err != nil {
		if errors.Is(err, oservice.ErrClosed) {
			err = ErrClosed
			return
		}
		if errors.Is(err, ErrCustomErr1) {
			err = oservice.NewError(err, ErrCustomErr1.Error(), ErrCodeCustomErr1)
		} else if errors.Is(err, ErrCustomErr2) {
			err = oservice.NewError(err, ErrCustomErr2.Error(), ErrCodeCustomErr2)
		}
		return
	}
	return
}

//#############//
//### Enums ###//
//#############//

type Vehicle int

const (
	Car    Vehicle = 1
	Pickup Vehicle = 2
)

//###############//
//### Service ###//
//###############//

const (
	CallIDMyCall          = "MyCall"
	StreamIDMyRawStream   = "MyRawStream"
	StreamIDMyTypedStream = "MyTypedStream"
)

type Client interface {
	closer.Closer
	StateChan() <-chan oclient.State
	// Calls
	MyCall(ctx context.Context, arg MyCallArg) (ret MyCallRet, err error)
	// Streams
	MyRawStream(ctx context.Context) (stream transport.Stream, err error)
	MyTypedStream(ctx context.Context) (stream *MyTypedStreamClientStream, err error)
}

type Service interface {
	closer.Closer
	Run() error
}

type ServiceHandler interface {
	// Calls
	MyCall(ctx oservice.Context, arg MyCallArg) (ret MyCallRet, err error)
	// Streams
	MyRawStream(ctx oservice.Context, stream transport.Stream)
	MyTypedStream(ctx oservice.Context, stream *MyTypedStreamServiceStream) error
}

type client struct {
	oclient.Client
	codec             codec.Codec
	callTimeout       time.Duration
	streamInitTimeout time.Duration
	maxArgSize        int
	maxRetSize        int
}

func NewClient(opts *oclient.Options) (c Client, err error) {
	oc, err := oclient.New(opts)
	if err != nil {
		return
	}
	c = &client{Client: oc, codec: opts.Codec, callTimeout: opts.CallTimeout, streamInitTimeout: opts.StreamInitTimeout, maxArgSize: opts.MaxArgSize, maxRetSize: opts.MaxRetSize}
	return
}

func (v1 *client) StateChan() <-chan oclient.State {
	return v1.Client.StateChan()
}

func (v1 *client) MyCall(ctx context.Context, arg MyCallArg) (ret MyCallRet, err error) {
	if v1.callTimeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, v1.callTimeout)
		defer cancel()
	}
	err = v1.Call(ctx, CallIDMyCall, arg, &ret)
	if err != nil {
		var cErr oclient.Error
		if errors.As(err, &cErr) {
			switch cErr.Code() {
			case ErrCodeCustomErr1:
				err = ErrCustomErr1
			}
		}
		return
	}
	err = validate.Struct(ret)
	if err != nil {
		err = _valErrCheck(err)
		return
	}
	return
}

func (v1 *client) MyRawStream(ctx context.Context) (stream transport.Stream, err error) {
	if v1.streamInitTimeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, v1.streamInitTimeout)
		defer cancel()
	}
	stream, err = v1.Stream(ctx, StreamIDMyRawStream)
	if err != nil {
		return
	}
	return
}

func (v1 *client) MyTypedStream(ctx context.Context) (stream *MyTypedStreamClientStream, err error) {
	if v1.streamInitTimeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, v1.streamInitTimeout)
		defer cancel()
	}
	str, err := v1.TypedRWStream(ctx, StreamIDMyTypedStream, oclient.DefaultMaxSize, oclient.DefaultMaxSize)
	if err != nil {
		return
	}
	stream = newMyTypedStreamClientStream(str)
	return
}

type service struct {
	oservice.Service
	h          ServiceHandler
	codec      codec.Codec
	maxArgSize int
	maxRetSize int
}

func NewService(h ServiceHandler, opts *oservice.Options) (s Service, err error) {
	os, err := oservice.New(opts)
	if err != nil {
		return
	}
	srvc := &service{Service: os, h: h, codec: opts.Codec, maxArgSize: opts.MaxArgSize, maxRetSize: opts.MaxRetSize}
	// Ensure usage.
	_ = srvc
	os.RegisterCall(CallIDMyCall, srvc.myCall, oservice.DefaultTimeout)
	os.RegisterStream(StreamIDMyRawStream, srvc.myRawStream)
	os.RegisterTypedRWStream(StreamIDMyTypedStream, srvc.myTypedStream, oservice.DefaultMaxSize, oservice.DefaultMaxSize)
	s = os
	return
}

func (v1 *service) myCall(ctx oservice.Context, argData []byte) (retData interface{}, err error) {
	var arg MyCallArg
	err = v1.codec.Decode(argData, &arg)
	if err != nil {
		return
	}
	err = validate.Struct(arg)
	if err != nil {
		err = _valErrCheck(err)
		return
	}
	ret, err := v1.h.MyCall(ctx, arg)
	if err != nil {
		if errors.Is(err, ErrCustomErr1) {
			err = oservice.NewError(err, ErrCustomErr1.Error(), ErrCodeCustomErr1)
		}
		return
	}
	retData = &ret
	return
}

func (v1 *service) myRawStream(ctx oservice.Context, stream transport.Stream) {
	v1.h.MyRawStream(ctx, stream)
}

func (v1 *service) myTypedStream(ctx oservice.Context, stream oservice.TypedRWStream) (err error) {
	err = v1.h.MyTypedStream(ctx, newMyTypedStreamServiceStream(stream))
	if err != nil {
		if errors.Is(err, ErrCustomErr1) {
			err = oservice.NewError(err, ErrCustomErr1.Error(), ErrCodeCustomErr1)
		} else if errors.Is(err, ErrCustomErr2) {
			err = oservice.NewError(err, ErrCustomErr2.Error(), ErrCodeCustomErr2)
		}
		return
	}
	return
}
