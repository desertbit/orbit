/* code generated by orbit */
package world

import (
	context "context"
	errors "errors"
	fmt "fmt"
	closer "github.com/desertbit/closer/v3"
	options "github.com/desertbit/options"
	oclient "github.com/desertbit/orbit/pkg/client"
	codec "github.com/desertbit/orbit/pkg/codec"
	packet "github.com/desertbit/orbit/pkg/packet"
	oservice "github.com/desertbit/orbit/pkg/service"
	transport "github.com/desertbit/orbit/pkg/transport"
	validator "github.com/go-playground/validator/v10"
	io "io"
	net "net"
	strings "strings"
	sync "sync"
	time "time"
)

// Ensure that all imports are used.
var (
	_ context.Context
	_ = errors.New("")
	_ = fmt.Sprint()
	_ io.Closer
	_ net.Conn
	_ time.Time
	_ strings.Builder
	_ sync.Locker
	_ oclient.Client
	_ closer.Closer
	_ codec.Codec
	_ = packet.MaxSize
	_ oservice.Service
	_ transport.Transport
	_ validator.StructLevel
)

//##############//
//### Errors ###//
//##############//

var ErrClosed = errors.New("closed")

func _clientErrorCheck(err error) error {
	return err
}
func _serviceErrorCheck(err error) error {
	return err
}
func _valErrCheck(err error) error {
	if vErrs, ok := err.(validator.ValidationErrors); ok {
		var errMsg strings.Builder
		for _, err := range vErrs {
			errMsg.WriteString(fmt.Sprintf("[name: '%s', value: '%s', tag: '%s']", err.StructNamespace(), err.Value(), err.Tag()))
		}
		return errors.New(errMsg.String())
	}
	return err
}

var validate = validator.New()

//#############//
//### Types ###//
//#############//

type YetAnotherCallArg struct {
	S string
}

//###############//
//### Service ###//
//###############//

// CallIDs
const (
	CallIDYetAnotherCall = "YetAnotherCall"

// StreamIDs
)

type Client interface {
	closer.Closer
	StateChan() <-chan oclient.State
	// Calls
	YetAnotherCall(ctx context.Context, arg YetAnotherCallArg) (err error)
}

type Service interface {
	closer.Closer
	Run() error
}

type ServiceHandler interface {
	// Calls
	YetAnotherCall(ctx oservice.Context, arg YetAnotherCallArg) (err error)
}

type client struct {
	oclient.Client
	codec             codec.Codec
	callTimeout       time.Duration
	streamInitTimeout time.Duration
	maxArgSize        int
	maxRetSize        int
}

func NewClient(opts oclient.Options) (c Client, err error) {
	err = options.SetDefaults(&opts, oclient.DefaultOptions())
	if err != nil {
		return
	}
	oc, err := oclient.New(opts)
	if err != nil {
		return
	}
	c = &client{Client: oc, codec: opts.Codec, callTimeout: opts.CallTimeout, streamInitTimeout: opts.StreamInitTimeout, maxArgSize: opts.MaxArgSize, maxRetSize: opts.MaxRetSize}
	return
}

func (v1 *client) StateChan() <-chan oclient.State {
	return v1.Client.StateChan()
}

func (v1 *client) YetAnotherCall(ctx context.Context, arg YetAnotherCallArg) (err error) {
	if v1.callTimeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, v1.callTimeout)
		defer cancel()
	}
	err = v1.Call(ctx, CallIDYetAnotherCall, arg, nil)
	if err != nil {
		err = _clientErrorCheck(err)
		return
	}
	return
}

type service struct {
	oservice.Service
	h          ServiceHandler
	codec      codec.Codec
	maxArgSize int
	maxRetSize int
}

func NewService(h ServiceHandler, opts oservice.Options) (s Service, err error) {
	err = options.SetDefaults(&opts, oservice.DefaultOptions())
	if err != nil {
		return
	}
	os, err := oservice.New(opts)
	if err != nil {
		return
	}
	srvc := &service{Service: os, h: h, codec: opts.Codec, maxArgSize: opts.MaxArgSize, maxRetSize: opts.MaxRetSize}
	// Ensure usage.
	_ = srvc
	os.RegisterCall(CallIDYetAnotherCall, srvc.yetAnotherCall, oservice.DefaultTimeout)
	s = os
	return
}

func (v1 *service) yetAnotherCall(ctx oservice.Context, argData []byte) (retData interface{}, err error) {
	var arg YetAnotherCallArg
	err = v1.codec.Decode(argData, &arg)
	if err != nil {
		return
	}
	err = validate.Struct(arg)
	if err != nil {
		err = _valErrCheck(err)
		return
	}
	err = v1.h.YetAnotherCall(ctx, arg)
	if err != nil {
		err = _serviceErrorCheck(err)
		return
	}
	return
}
