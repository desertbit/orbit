package simple

// Code generated by github.com/desertbit/msgp DO NOT EDIT.

import (
	"github.com/desertbit/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MyCallArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequiredArg":
			z.RequiredArg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequiredArg")
				return
			}
		case "OptionalArg":
			z.OptionalArg, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OptionalArg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MyCallArg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "RequiredArg"
	err = en.Append(0x82, 0xab, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.RequiredArg)
	if err != nil {
		err = msgp.WrapError(err, "RequiredArg")
		return
	}
	// write "OptionalArg"
	err = en.Append(0xab, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OptionalArg)
	if err != nil {
		err = msgp.WrapError(err, "OptionalArg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MyCallArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "RequiredArg"
	o = append(o, 0x82, 0xab, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67)
	o = msgp.AppendString(o, z.RequiredArg)
	// string "OptionalArg"
	o = append(o, 0xab, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67)
	o = msgp.AppendInt(o, z.OptionalArg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MyCallArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequiredArg":
			z.RequiredArg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequiredArg")
				return
			}
		case "OptionalArg":
			z.OptionalArg, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OptionalArg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MyCallArg) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.RequiredArg) + 12 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MyCallRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Answer":
			z.Answer, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MyCallRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Answer"
	err = en.Append(0x81, 0xa6, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Answer)
	if err != nil {
		err = msgp.WrapError(err, "Answer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MyCallRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Answer"
	o = append(o, 0x81, 0xa6, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72)
	o = msgp.AppendString(o, z.Answer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MyCallRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Answer":
			z.Answer, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MyCallRet) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Answer)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MyTypedStreamRet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ok":
			z.Ok, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MyTypedStreamRet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Ok"
	err = en.Append(0x81, 0xa2, 0x4f, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Ok)
	if err != nil {
		err = msgp.WrapError(err, "Ok")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MyTypedStreamRet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Ok"
	o = append(o, 0x81, 0xa2, 0x4f, 0x6b)
	o = msgp.AppendBool(o, z.Ok)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MyTypedStreamRet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ok":
			z.Ok, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MyTypedStreamRet) Msgsize() (s int) {
	s = 1 + 3 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PersonInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Locale":
			z.Locale, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Locale")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "VehicleType":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "VehicleType")
					return
				}
				z.VehicleType = Vehicle(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PersonInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Name"
	err = en.Append(0x85, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Age"
	err = en.Append(0xa3, 0x41, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "Locale"
	err = en.Append(0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Locale)
	if err != nil {
		err = msgp.WrapError(err, "Locale")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "VehicleType"
	err = en.Append(0xab, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.VehicleType))
	if err != nil {
		err = msgp.WrapError(err, "VehicleType")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PersonInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Name"
	o = append(o, 0x85, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Age"
	o = append(o, 0xa3, 0x41, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	// string "Locale"
	o = append(o, 0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Locale)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "VehicleType"
	o = append(o, 0xab, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, int(z.VehicleType))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PersonInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Locale":
			z.Locale, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Locale")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "VehicleType":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VehicleType")
					return
				}
				z.VehicleType = Vehicle(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PersonInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Locale) + 8 + msgp.StringPrefixSize + len(z.Address) + 12 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Vehicle) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Vehicle(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Vehicle) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Vehicle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Vehicle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Vehicle(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Vehicle) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
