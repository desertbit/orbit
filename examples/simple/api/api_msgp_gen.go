package api

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Args) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Crazy":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Crazy")
				return
			}
			if z.Crazy == nil {
				z.Crazy = make(map[string][][]map[string]En1, zb0002)
			} else if len(z.Crazy) > 0 {
				for key := range z.Crazy {
					delete(z.Crazy, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 [][]map[string]En1
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Crazy")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([][]map[string]En1, zb0003)
				}
				for za0003 := range za0002 {
					var zb0004 uint32
					zb0004, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003)
						return
					}
					if cap(za0002[za0003]) >= int(zb0004) {
						za0002[za0003] = (za0002[za0003])[:zb0004]
					} else {
						za0002[za0003] = make([]map[string]En1, zb0004)
					}
					for za0004 := range za0002[za0003] {
						var zb0005 uint32
						zb0005, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
							return
						}
						if za0002[za0003][za0004] == nil {
							za0002[za0003][za0004] = make(map[string]En1, zb0005)
						} else if len(za0002[za0003][za0004]) > 0 {
							for key := range za0002[za0003][za0004] {
								delete(za0002[za0003][za0004], key)
							}
						}
						for zb0005 > 0 {
							zb0005--
							var za0005 string
							var za0006 En1
							za0005, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
								return
							}
							{
								var zb0006 int
								zb0006, err = dc.ReadInt()
								if err != nil {
									err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
									return
								}
								za0006 = En1(zb0006)
							}
							za0002[za0003][za0004][za0005] = za0006
						}
					}
				}
				z.Crazy[za0001] = za0002
			}
		case "I":
			z.I, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "M":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]int, zb0007)
			} else if len(z.M) > 0 {
				for key := range z.M {
					delete(z.M, key)
				}
			}
			for zb0007 > 0 {
				zb0007--
				var za0007 string
				var za0008 int
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				za0008, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "M", za0007)
					return
				}
				z.M[za0007] = za0008
			}
		case "S":
			z.S, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "Sl":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sl")
				return
			}
			if cap(z.Sl) >= int(zb0008) {
				z.Sl = (z.Sl)[:zb0008]
			} else {
				z.Sl = make([]time.Time, zb0008)
			}
			for za0009 := range z.Sl {
				z.Sl[za0009], err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "Sl", za0009)
					return
				}
			}
		case "St":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
				z.St = nil
			} else {
				if z.St == nil {
					z.St = new(Ret)
				}
				err = z.St.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Args) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Crazy"
	err = en.Append(0x86, 0xa5, 0x43, 0x72, 0x61, 0x7a, 0x79)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Crazy)))
	if err != nil {
		err = msgp.WrapError(err, "Crazy")
		return
	}
	for za0001, za0002 := range z.Crazy {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Crazy")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Crazy", za0001)
			return
		}
		for za0003 := range za0002 {
			err = en.WriteArrayHeader(uint32(len(za0002[za0003])))
			if err != nil {
				err = msgp.WrapError(err, "Crazy", za0001, za0003)
				return
			}
			for za0004 := range za0002[za0003] {
				err = en.WriteMapHeader(uint32(len(za0002[za0003][za0004])))
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
					return
				}
				for za0005, za0006 := range za0002[za0003][za0004] {
					err = en.WriteString(za0005)
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
						return
					}
					err = en.WriteInt(int(za0006))
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
						return
					}
				}
			}
		}
	}
	// write "I"
	err = en.Append(0xa1, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.I)
	if err != nil {
		err = msgp.WrapError(err, "I")
		return
	}
	// write "M"
	err = en.Append(0xa1, 0x4d)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.M)))
	if err != nil {
		err = msgp.WrapError(err, "M")
		return
	}
	for za0007, za0008 := range z.M {
		err = en.WriteString(za0007)
		if err != nil {
			err = msgp.WrapError(err, "M")
			return
		}
		err = en.WriteInt(za0008)
		if err != nil {
			err = msgp.WrapError(err, "M", za0007)
			return
		}
	}
	// write "S"
	err = en.Append(0xa1, 0x53)
	if err != nil {
		return
	}
	err = en.WriteString(z.S)
	if err != nil {
		err = msgp.WrapError(err, "S")
		return
	}
	// write "Sl"
	err = en.Append(0xa2, 0x53, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sl)))
	if err != nil {
		err = msgp.WrapError(err, "Sl")
		return
	}
	for za0009 := range z.Sl {
		err = en.WriteTime(z.Sl[za0009])
		if err != nil {
			err = msgp.WrapError(err, "Sl", za0009)
			return
		}
	}
	// write "St"
	err = en.Append(0xa2, 0x53, 0x74)
	if err != nil {
		return
	}
	if z.St == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.St.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "St")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Args) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Crazy"
	o = append(o, 0x86, 0xa5, 0x43, 0x72, 0x61, 0x7a, 0x79)
	o = msgp.AppendMapHeader(o, uint32(len(z.Crazy)))
	for za0001, za0002 := range z.Crazy {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendArrayHeader(o, uint32(len(za0002[za0003])))
			for za0004 := range za0002[za0003] {
				o = msgp.AppendMapHeader(o, uint32(len(za0002[za0003][za0004])))
				for za0005, za0006 := range za0002[za0003][za0004] {
					o = msgp.AppendString(o, za0005)
					o = msgp.AppendInt(o, int(za0006))
				}
			}
		}
	}
	// string "I"
	o = append(o, 0xa1, 0x49)
	o = msgp.AppendInt(o, z.I)
	// string "M"
	o = append(o, 0xa1, 0x4d)
	o = msgp.AppendMapHeader(o, uint32(len(z.M)))
	for za0007, za0008 := range z.M {
		o = msgp.AppendString(o, za0007)
		o = msgp.AppendInt(o, za0008)
	}
	// string "S"
	o = append(o, 0xa1, 0x53)
	o = msgp.AppendString(o, z.S)
	// string "Sl"
	o = append(o, 0xa2, 0x53, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sl)))
	for za0009 := range z.Sl {
		o = msgp.AppendTime(o, z.Sl[za0009])
	}
	// string "St"
	o = append(o, 0xa2, 0x53, 0x74)
	if z.St == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.St.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "St")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Crazy":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Crazy")
				return
			}
			if z.Crazy == nil {
				z.Crazy = make(map[string][][]map[string]En1, zb0002)
			} else if len(z.Crazy) > 0 {
				for key := range z.Crazy {
					delete(z.Crazy, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 [][]map[string]En1
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Crazy")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([][]map[string]En1, zb0003)
				}
				for za0003 := range za0002 {
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003)
						return
					}
					if cap(za0002[za0003]) >= int(zb0004) {
						za0002[za0003] = (za0002[za0003])[:zb0004]
					} else {
						za0002[za0003] = make([]map[string]En1, zb0004)
					}
					for za0004 := range za0002[za0003] {
						var zb0005 uint32
						zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
							return
						}
						if za0002[za0003][za0004] == nil {
							za0002[za0003][za0004] = make(map[string]En1, zb0005)
						} else if len(za0002[za0003][za0004]) > 0 {
							for key := range za0002[za0003][za0004] {
								delete(za0002[za0003][za0004], key)
							}
						}
						for zb0005 > 0 {
							var za0005 string
							var za0006 En1
							zb0005--
							za0005, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
								return
							}
							{
								var zb0006 int
								zb0006, bts, err = msgp.ReadIntBytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
									return
								}
								za0006 = En1(zb0006)
							}
							za0002[za0003][za0004][za0005] = za0006
						}
					}
				}
				z.Crazy[za0001] = za0002
			}
		case "I":
			z.I, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "M":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]int, zb0007)
			} else if len(z.M) > 0 {
				for key := range z.M {
					delete(z.M, key)
				}
			}
			for zb0007 > 0 {
				var za0007 string
				var za0008 int
				zb0007--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				za0008, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M", za0007)
					return
				}
				z.M[za0007] = za0008
			}
		case "S":
			z.S, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "Sl":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sl")
				return
			}
			if cap(z.Sl) >= int(zb0008) {
				z.Sl = (z.Sl)[:zb0008]
			} else {
				z.Sl = make([]time.Time, zb0008)
			}
			for za0009 := range z.Sl {
				z.Sl[za0009], bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sl", za0009)
					return
				}
			}
		case "St":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.St = nil
			} else {
				if z.St == nil {
					z.St = new(Ret)
				}
				bts, err = z.St.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Args) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Crazy != nil {
		for za0001, za0002 := range z.Crazy {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += msgp.ArrayHeaderSize
				for za0004 := range za0002[za0003] {
					s += msgp.MapHeaderSize
					if za0002[za0003][za0004] != nil {
						for za0005, za0006 := range za0002[za0003][za0004] {
							_ = za0006
							s += msgp.StringPrefixSize + len(za0005) + msgp.IntSize
						}
					}
				}
			}
		}
	}
	s += 2 + msgp.IntSize + 2 + msgp.MapHeaderSize
	if z.M != nil {
		for za0007, za0008 := range z.M {
			_ = za0008
			s += msgp.StringPrefixSize + len(za0007) + msgp.IntSize
		}
	}
	s += 2 + msgp.StringPrefixSize + len(z.S) + 3 + msgp.ArrayHeaderSize + (len(z.Sl) * (msgp.TimeSize)) + 3
	if z.St == nil {
		s += msgp.NilSize
	} else {
		s += z.St.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *En1) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = En1(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z En1) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z En1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *En1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = En1(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z En1) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Rc1Ret) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Crazy":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Crazy")
				return
			}
			if z.Crazy == nil {
				z.Crazy = make(map[string][][]map[string]En1, zb0002)
			} else if len(z.Crazy) > 0 {
				for key := range z.Crazy {
					delete(z.Crazy, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 [][]map[string]En1
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Crazy")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([][]map[string]En1, zb0003)
				}
				for za0003 := range za0002 {
					var zb0004 uint32
					zb0004, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003)
						return
					}
					if cap(za0002[za0003]) >= int(zb0004) {
						za0002[za0003] = (za0002[za0003])[:zb0004]
					} else {
						za0002[za0003] = make([]map[string]En1, zb0004)
					}
					for za0004 := range za0002[za0003] {
						var zb0005 uint32
						zb0005, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
							return
						}
						if za0002[za0003][za0004] == nil {
							za0002[za0003][za0004] = make(map[string]En1, zb0005)
						} else if len(za0002[za0003][za0004]) > 0 {
							for key := range za0002[za0003][za0004] {
								delete(za0002[za0003][za0004], key)
							}
						}
						for zb0005 > 0 {
							zb0005--
							var za0005 string
							var za0006 En1
							za0005, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
								return
							}
							{
								var zb0006 int
								zb0006, err = dc.ReadInt()
								if err != nil {
									err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
									return
								}
								za0006 = En1(zb0006)
							}
							za0002[za0003][za0004][za0005] = za0006
						}
					}
				}
				z.Crazy[za0001] = za0002
			}
		case "I":
			z.I, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "M":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]int, zb0007)
			} else if len(z.M) > 0 {
				for key := range z.M {
					delete(z.M, key)
				}
			}
			for zb0007 > 0 {
				zb0007--
				var za0007 string
				var za0008 int
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				za0008, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "M", za0007)
					return
				}
				z.M[za0007] = za0008
			}
		case "S":
			z.S, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "Sl":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sl")
				return
			}
			if cap(z.Sl) >= int(zb0008) {
				z.Sl = (z.Sl)[:zb0008]
			} else {
				z.Sl = make([]time.Time, zb0008)
			}
			for za0009 := range z.Sl {
				z.Sl[za0009], err = dc.ReadTime()
				if err != nil {
					err = msgp.WrapError(err, "Sl", za0009)
					return
				}
			}
		case "St":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
				z.St = nil
			} else {
				if z.St == nil {
					z.St = new(Ret)
				}
				err = z.St.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Rc1Ret) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Crazy"
	err = en.Append(0x86, 0xa5, 0x43, 0x72, 0x61, 0x7a, 0x79)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Crazy)))
	if err != nil {
		err = msgp.WrapError(err, "Crazy")
		return
	}
	for za0001, za0002 := range z.Crazy {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Crazy")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Crazy", za0001)
			return
		}
		for za0003 := range za0002 {
			err = en.WriteArrayHeader(uint32(len(za0002[za0003])))
			if err != nil {
				err = msgp.WrapError(err, "Crazy", za0001, za0003)
				return
			}
			for za0004 := range za0002[za0003] {
				err = en.WriteMapHeader(uint32(len(za0002[za0003][za0004])))
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
					return
				}
				for za0005, za0006 := range za0002[za0003][za0004] {
					err = en.WriteString(za0005)
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
						return
					}
					err = en.WriteInt(int(za0006))
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
						return
					}
				}
			}
		}
	}
	// write "I"
	err = en.Append(0xa1, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.I)
	if err != nil {
		err = msgp.WrapError(err, "I")
		return
	}
	// write "M"
	err = en.Append(0xa1, 0x4d)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.M)))
	if err != nil {
		err = msgp.WrapError(err, "M")
		return
	}
	for za0007, za0008 := range z.M {
		err = en.WriteString(za0007)
		if err != nil {
			err = msgp.WrapError(err, "M")
			return
		}
		err = en.WriteInt(za0008)
		if err != nil {
			err = msgp.WrapError(err, "M", za0007)
			return
		}
	}
	// write "S"
	err = en.Append(0xa1, 0x53)
	if err != nil {
		return
	}
	err = en.WriteString(z.S)
	if err != nil {
		err = msgp.WrapError(err, "S")
		return
	}
	// write "Sl"
	err = en.Append(0xa2, 0x53, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sl)))
	if err != nil {
		err = msgp.WrapError(err, "Sl")
		return
	}
	for za0009 := range z.Sl {
		err = en.WriteTime(z.Sl[za0009])
		if err != nil {
			err = msgp.WrapError(err, "Sl", za0009)
			return
		}
	}
	// write "St"
	err = en.Append(0xa2, 0x53, 0x74)
	if err != nil {
		return
	}
	if z.St == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.St.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "St")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Rc1Ret) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Crazy"
	o = append(o, 0x86, 0xa5, 0x43, 0x72, 0x61, 0x7a, 0x79)
	o = msgp.AppendMapHeader(o, uint32(len(z.Crazy)))
	for za0001, za0002 := range z.Crazy {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendArrayHeader(o, uint32(len(za0002[za0003])))
			for za0004 := range za0002[za0003] {
				o = msgp.AppendMapHeader(o, uint32(len(za0002[za0003][za0004])))
				for za0005, za0006 := range za0002[za0003][za0004] {
					o = msgp.AppendString(o, za0005)
					o = msgp.AppendInt(o, int(za0006))
				}
			}
		}
	}
	// string "I"
	o = append(o, 0xa1, 0x49)
	o = msgp.AppendInt(o, z.I)
	// string "M"
	o = append(o, 0xa1, 0x4d)
	o = msgp.AppendMapHeader(o, uint32(len(z.M)))
	for za0007, za0008 := range z.M {
		o = msgp.AppendString(o, za0007)
		o = msgp.AppendInt(o, za0008)
	}
	// string "S"
	o = append(o, 0xa1, 0x53)
	o = msgp.AppendString(o, z.S)
	// string "Sl"
	o = append(o, 0xa2, 0x53, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sl)))
	for za0009 := range z.Sl {
		o = msgp.AppendTime(o, z.Sl[za0009])
	}
	// string "St"
	o = append(o, 0xa2, 0x53, 0x74)
	if z.St == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.St.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "St")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Rc1Ret) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Crazy":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Crazy")
				return
			}
			if z.Crazy == nil {
				z.Crazy = make(map[string][][]map[string]En1, zb0002)
			} else if len(z.Crazy) > 0 {
				for key := range z.Crazy {
					delete(z.Crazy, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 [][]map[string]En1
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Crazy")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Crazy", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([][]map[string]En1, zb0003)
				}
				for za0003 := range za0002 {
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Crazy", za0001, za0003)
						return
					}
					if cap(za0002[za0003]) >= int(zb0004) {
						za0002[za0003] = (za0002[za0003])[:zb0004]
					} else {
						za0002[za0003] = make([]map[string]En1, zb0004)
					}
					for za0004 := range za0002[za0003] {
						var zb0005 uint32
						zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
							return
						}
						if za0002[za0003][za0004] == nil {
							za0002[za0003][za0004] = make(map[string]En1, zb0005)
						} else if len(za0002[za0003][za0004]) > 0 {
							for key := range za0002[za0003][za0004] {
								delete(za0002[za0003][za0004], key)
							}
						}
						for zb0005 > 0 {
							var za0005 string
							var za0006 En1
							zb0005--
							za0005, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004)
								return
							}
							{
								var zb0006 int
								zb0006, bts, err = msgp.ReadIntBytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "Crazy", za0001, za0003, za0004, za0005)
									return
								}
								za0006 = En1(zb0006)
							}
							za0002[za0003][za0004][za0005] = za0006
						}
					}
				}
				z.Crazy[za0001] = za0002
			}
		case "I":
			z.I, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "M":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]int, zb0007)
			} else if len(z.M) > 0 {
				for key := range z.M {
					delete(z.M, key)
				}
			}
			for zb0007 > 0 {
				var za0007 string
				var za0008 int
				zb0007--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				za0008, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M", za0007)
					return
				}
				z.M[za0007] = za0008
			}
		case "S":
			z.S, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "Sl":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sl")
				return
			}
			if cap(z.Sl) >= int(zb0008) {
				z.Sl = (z.Sl)[:zb0008]
			} else {
				z.Sl = make([]time.Time, zb0008)
			}
			for za0009 := range z.Sl {
				z.Sl[za0009], bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sl", za0009)
					return
				}
			}
		case "St":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.St = nil
			} else {
				if z.St == nil {
					z.St = new(Ret)
				}
				bts, err = z.St.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "St")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Rc1Ret) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Crazy != nil {
		for za0001, za0002 := range z.Crazy {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += msgp.ArrayHeaderSize
				for za0004 := range za0002[za0003] {
					s += msgp.MapHeaderSize
					if za0002[za0003][za0004] != nil {
						for za0005, za0006 := range za0002[za0003][za0004] {
							_ = za0006
							s += msgp.StringPrefixSize + len(za0005) + msgp.IntSize
						}
					}
				}
			}
		}
	}
	s += 2 + msgp.IntSize + 2 + msgp.MapHeaderSize
	if z.M != nil {
		for za0007, za0008 := range z.M {
			_ = za0008
			s += msgp.StringPrefixSize + len(za0007) + msgp.IntSize
		}
	}
	s += 2 + msgp.StringPrefixSize + len(z.S) + 3 + msgp.ArrayHeaderSize + (len(z.Sl) * (msgp.TimeSize)) + 3
	if z.St == nil {
		s += msgp.NilSize
	} else {
		s += z.St.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Rc2Args) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "B":
			z.B, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "F":
			z.F, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "F")
				return
			}
		case "U16":
			z.U16, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "U16")
				return
			}
		case "U32":
			z.U32, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "U32")
				return
			}
		case "U64":
			z.U64, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "U64")
				return
			}
		case "U8":
			z.U8, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "U8")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Rc2Args) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "B"
	err = en.Append(0x86, 0xa1, 0x42)
	if err != nil {
		return
	}
	err = en.WriteByte(z.B)
	if err != nil {
		err = msgp.WrapError(err, "B")
		return
	}
	// write "F"
	err = en.Append(0xa1, 0x46)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.F)
	if err != nil {
		err = msgp.WrapError(err, "F")
		return
	}
	// write "U16"
	err = en.Append(0xa3, 0x55, 0x31, 0x36)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.U16)
	if err != nil {
		err = msgp.WrapError(err, "U16")
		return
	}
	// write "U32"
	err = en.Append(0xa3, 0x55, 0x33, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.U32)
	if err != nil {
		err = msgp.WrapError(err, "U32")
		return
	}
	// write "U64"
	err = en.Append(0xa3, 0x55, 0x36, 0x34)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.U64)
	if err != nil {
		err = msgp.WrapError(err, "U64")
		return
	}
	// write "U8"
	err = en.Append(0xa2, 0x55, 0x38)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.U8)
	if err != nil {
		err = msgp.WrapError(err, "U8")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Rc2Args) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "B"
	o = append(o, 0x86, 0xa1, 0x42)
	o = msgp.AppendByte(o, z.B)
	// string "F"
	o = append(o, 0xa1, 0x46)
	o = msgp.AppendFloat64(o, z.F)
	// string "U16"
	o = append(o, 0xa3, 0x55, 0x31, 0x36)
	o = msgp.AppendUint16(o, z.U16)
	// string "U32"
	o = append(o, 0xa3, 0x55, 0x33, 0x32)
	o = msgp.AppendUint32(o, z.U32)
	// string "U64"
	o = append(o, 0xa3, 0x55, 0x36, 0x34)
	o = msgp.AppendUint64(o, z.U64)
	// string "U8"
	o = append(o, 0xa2, 0x55, 0x38)
	o = msgp.AppendUint8(o, z.U8)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Rc2Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "B":
			z.B, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "F":
			z.F, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "F")
				return
			}
		case "U16":
			z.U16, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U16")
				return
			}
		case "U32":
			z.U32, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U32")
				return
			}
		case "U64":
			z.U64, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U64")
				return
			}
		case "U8":
			z.U8, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U8")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Rc2Args) Msgsize() (s int) {
	s = 1 + 2 + msgp.ByteSize + 2 + msgp.Float64Size + 4 + msgp.Uint16Size + 4 + msgp.Uint32Size + 4 + msgp.Uint64Size + 3 + msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Ret) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "B":
			z.B, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "F":
			z.F, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "F")
				return
			}
		case "U16":
			z.U16, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "U16")
				return
			}
		case "U32":
			z.U32, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "U32")
				return
			}
		case "U64":
			z.U64, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "U64")
				return
			}
		case "U8":
			z.U8, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "U8")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Ret) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "B"
	err = en.Append(0x86, 0xa1, 0x42)
	if err != nil {
		return
	}
	err = en.WriteByte(z.B)
	if err != nil {
		err = msgp.WrapError(err, "B")
		return
	}
	// write "F"
	err = en.Append(0xa1, 0x46)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.F)
	if err != nil {
		err = msgp.WrapError(err, "F")
		return
	}
	// write "U16"
	err = en.Append(0xa3, 0x55, 0x31, 0x36)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.U16)
	if err != nil {
		err = msgp.WrapError(err, "U16")
		return
	}
	// write "U32"
	err = en.Append(0xa3, 0x55, 0x33, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.U32)
	if err != nil {
		err = msgp.WrapError(err, "U32")
		return
	}
	// write "U64"
	err = en.Append(0xa3, 0x55, 0x36, 0x34)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.U64)
	if err != nil {
		err = msgp.WrapError(err, "U64")
		return
	}
	// write "U8"
	err = en.Append(0xa2, 0x55, 0x38)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.U8)
	if err != nil {
		err = msgp.WrapError(err, "U8")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ret) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "B"
	o = append(o, 0x86, 0xa1, 0x42)
	o = msgp.AppendByte(o, z.B)
	// string "F"
	o = append(o, 0xa1, 0x46)
	o = msgp.AppendFloat64(o, z.F)
	// string "U16"
	o = append(o, 0xa3, 0x55, 0x31, 0x36)
	o = msgp.AppendUint16(o, z.U16)
	// string "U32"
	o = append(o, 0xa3, 0x55, 0x33, 0x32)
	o = msgp.AppendUint32(o, z.U32)
	// string "U64"
	o = append(o, 0xa3, 0x55, 0x36, 0x34)
	o = msgp.AppendUint64(o, z.U64)
	// string "U8"
	o = append(o, 0xa2, 0x55, 0x38)
	o = msgp.AppendUint8(o, z.U8)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ret) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "B":
			z.B, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "F":
			z.F, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "F")
				return
			}
		case "U16":
			z.U16, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U16")
				return
			}
		case "U32":
			z.U32, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U32")
				return
			}
		case "U64":
			z.U64, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U64")
				return
			}
		case "U8":
			z.U8, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "U8")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ret) Msgsize() (s int) {
	s = 1 + 2 + msgp.ByteSize + 2 + msgp.Float64Size + 4 + msgp.Uint16Size + 4 + msgp.Uint32Size + 4 + msgp.Uint64Size + 3 + msgp.Uint8Size
	return
}
