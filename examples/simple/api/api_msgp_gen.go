package api

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Char) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Char) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Lol"
	err = en.Append(0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Lol)
	if err != nil {
		err = msgp.WrapError(err, "Lol")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Char) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Lol"
	o = append(o, 0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Lol)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Char) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Char) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Lol)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExampleChar) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExampleChar) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Lol"
	err = en.Append(0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Lol)
	if err != nil {
		err = msgp.WrapError(err, "Lol")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExampleChar) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Lol"
	o = append(o, 0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Lol)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExampleChar) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExampleChar) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Lol)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExampleRect) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "C":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				z.C = nil
			} else {
				if z.C == nil {
					z.C = new(ExampleChar)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "C")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Lol":
						z.C.Lol, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "C", "Lol")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "C")
							return
						}
					}
				}
			}
		case "X1":
			z.X1, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X1")
				return
			}
		case "X2":
			z.X2, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X2")
				return
			}
		case "Y1":
			z.Y1, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y1")
				return
			}
		case "Y2":
			z.Y2, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y2")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ExampleRect) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "C"
	err = en.Append(0x85, 0xa1, 0x43)
	if err != nil {
		return
	}
	if z.C == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Lol"
		err = en.Append(0x81, 0xa3, 0x4c, 0x6f, 0x6c)
		if err != nil {
			return
		}
		err = en.WriteString(z.C.Lol)
		if err != nil {
			err = msgp.WrapError(err, "C", "Lol")
			return
		}
	}
	// write "X1"
	err = en.Append(0xa2, 0x58, 0x31)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.X1)
	if err != nil {
		err = msgp.WrapError(err, "X1")
		return
	}
	// write "X2"
	err = en.Append(0xa2, 0x58, 0x32)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.X2)
	if err != nil {
		err = msgp.WrapError(err, "X2")
		return
	}
	// write "Y1"
	err = en.Append(0xa2, 0x59, 0x31)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Y1)
	if err != nil {
		err = msgp.WrapError(err, "Y1")
		return
	}
	// write "Y2"
	err = en.Append(0xa2, 0x59, 0x32)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Y2)
	if err != nil {
		err = msgp.WrapError(err, "Y2")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ExampleRect) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "C"
	o = append(o, 0x85, 0xa1, 0x43)
	if z.C == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Lol"
		o = append(o, 0x81, 0xa3, 0x4c, 0x6f, 0x6c)
		o = msgp.AppendString(o, z.C.Lol)
	}
	// string "X1"
	o = append(o, 0xa2, 0x58, 0x31)
	o = msgp.AppendFloat32(o, z.X1)
	// string "X2"
	o = append(o, 0xa2, 0x58, 0x32)
	o = msgp.AppendFloat32(o, z.X2)
	// string "Y1"
	o = append(o, 0xa2, 0x59, 0x31)
	o = msgp.AppendFloat32(o, z.Y1)
	// string "Y2"
	o = append(o, 0xa2, 0x59, 0x32)
	o = msgp.AppendFloat32(o, z.Y2)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExampleRect) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "C":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.C = nil
			} else {
				if z.C == nil {
					z.C = new(ExampleChar)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "C")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Lol":
						z.C.Lol, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "C", "Lol")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "C")
							return
						}
					}
				}
			}
		case "X1":
			z.X1, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X1")
				return
			}
		case "X2":
			z.X2, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X2")
				return
			}
		case "Y1":
			z.Y1, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y1")
				return
			}
		case "Y2":
			z.Y2, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y2")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExampleRect) Msgsize() (s int) {
	s = 1 + 2
	if z.C == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.C.Lol)
	}
	s += 3 + msgp.Float32Size + 3 + msgp.Float32Size + 3 + msgp.Float32Size + 3 + msgp.Float32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExampleTest3Args) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "I":
			z.I, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "V":
			z.V, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "V")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExampleTest3Args) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "I"
	err = en.Append(0x82, 0xa1, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.I)
	if err != nil {
		err = msgp.WrapError(err, "I")
		return
	}
	// write "V"
	err = en.Append(0xa1, 0x56)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.V)
	if err != nil {
		err = msgp.WrapError(err, "V")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExampleTest3Args) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "I"
	o = append(o, 0x82, 0xa1, 0x49)
	o = msgp.AppendInt(o, z.I)
	// string "V"
	o = append(o, 0xa1, 0x56)
	o = msgp.AppendFloat64(o, z.V)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExampleTest3Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "I":
			z.I, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "V":
			z.V, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "V")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExampleTest3Args) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExampleTest3Ret) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExampleTest3Ret) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Lol"
	err = en.Append(0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Lol)
	if err != nil {
		err = msgp.WrapError(err, "Lol")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExampleTest3Ret) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Lol"
	o = append(o, 0x81, 0xa3, 0x4c, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Lol)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExampleTest3Ret) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Lol":
			z.Lol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lol")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExampleTest3Ret) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Lol)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Plate) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Rect":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Rect")
					return
				}
				z.Rect = nil
			} else {
				if z.Rect == nil {
					z.Rect = new(Rect)
				}
				err = z.Rect.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Rect")
					return
				}
			}
		case "Test2":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Test2")
				return
			}
			if cap(z.Test2) >= int(zb0002) {
				z.Test2 = (z.Test2)[:zb0002]
			} else {
				z.Test2 = make([]*Rect, zb0002)
			}
			for za0001 := range z.Test2 {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Test2", za0001)
						return
					}
					z.Test2[za0001] = nil
				} else {
					if z.Test2[za0001] == nil {
						z.Test2[za0001] = new(Rect)
					}
					err = z.Test2[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Test2", za0001)
						return
					}
				}
			}
		case "Test3":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Test3")
				return
			}
			if cap(z.Test3) >= int(zb0003) {
				z.Test3 = (z.Test3)[:zb0003]
			} else {
				z.Test3 = make([]float32, zb0003)
			}
			for za0002 := range z.Test3 {
				z.Test3[za0002], err = dc.ReadFloat32()
				if err != nil {
					err = msgp.WrapError(err, "Test3", za0002)
					return
				}
			}
		case "Ts":
			z.Ts, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		case "Version":
			z.Version, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Plate) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Name"
	err = en.Append(0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Rect"
	err = en.Append(0xa4, 0x52, 0x65, 0x63, 0x74)
	if err != nil {
		return
	}
	if z.Rect == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Rect.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Rect")
			return
		}
	}
	// write "Test2"
	err = en.Append(0xa5, 0x54, 0x65, 0x73, 0x74, 0x32)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Test2)))
	if err != nil {
		err = msgp.WrapError(err, "Test2")
		return
	}
	for za0001 := range z.Test2 {
		if z.Test2[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Test2[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Test2", za0001)
				return
			}
		}
	}
	// write "Test3"
	err = en.Append(0xa5, 0x54, 0x65, 0x73, 0x74, 0x33)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Test3)))
	if err != nil {
		err = msgp.WrapError(err, "Test3")
		return
	}
	for za0002 := range z.Test3 {
		err = en.WriteFloat32(z.Test3[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Test3", za0002)
			return
		}
	}
	// write "Ts"
	err = en.Append(0xa2, 0x54, 0x73)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Ts)
	if err != nil {
		err = msgp.WrapError(err, "Ts")
		return
	}
	// write "Version"
	err = en.Append(0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Plate) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Name"
	o = append(o, 0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Rect"
	o = append(o, 0xa4, 0x52, 0x65, 0x63, 0x74)
	if z.Rect == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Rect.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Rect")
			return
		}
	}
	// string "Test2"
	o = append(o, 0xa5, 0x54, 0x65, 0x73, 0x74, 0x32)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Test2)))
	for za0001 := range z.Test2 {
		if z.Test2[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Test2[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Test2", za0001)
				return
			}
		}
	}
	// string "Test3"
	o = append(o, 0xa5, 0x54, 0x65, 0x73, 0x74, 0x33)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Test3)))
	for za0002 := range z.Test3 {
		o = msgp.AppendFloat32(o, z.Test3[za0002])
	}
	// string "Ts"
	o = append(o, 0xa2, 0x54, 0x73)
	o = msgp.AppendTime(o, z.Ts)
	// string "Version"
	o = append(o, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Plate) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Rect":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Rect = nil
			} else {
				if z.Rect == nil {
					z.Rect = new(Rect)
				}
				bts, err = z.Rect.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rect")
					return
				}
			}
		case "Test2":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Test2")
				return
			}
			if cap(z.Test2) >= int(zb0002) {
				z.Test2 = (z.Test2)[:zb0002]
			} else {
				z.Test2 = make([]*Rect, zb0002)
			}
			for za0001 := range z.Test2 {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Test2[za0001] = nil
				} else {
					if z.Test2[za0001] == nil {
						z.Test2[za0001] = new(Rect)
					}
					bts, err = z.Test2[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Test2", za0001)
						return
					}
				}
			}
		case "Test3":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Test3")
				return
			}
			if cap(z.Test3) >= int(zb0003) {
				z.Test3 = (z.Test3)[:zb0003]
			} else {
				z.Test3 = make([]float32, zb0003)
			}
			for za0002 := range z.Test3 {
				z.Test3[za0002], bts, err = msgp.ReadFloat32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Test3", za0002)
					return
				}
			}
		case "Ts":
			z.Ts, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		case "Version":
			z.Version, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Plate) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5
	if z.Rect == nil {
		s += msgp.NilSize
	} else {
		s += z.Rect.Msgsize()
	}
	s += 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Test2 {
		if z.Test2[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Test2[za0001].Msgsize()
		}
	}
	s += 6 + msgp.ArrayHeaderSize + (len(z.Test3) * (msgp.Float32Size)) + 3 + msgp.TimeSize + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Rect) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "C":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				z.C = nil
			} else {
				if z.C == nil {
					z.C = new(Char)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "C")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Lol":
						z.C.Lol, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "C", "Lol")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "C")
							return
						}
					}
				}
			}
		case "X1":
			z.X1, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X1")
				return
			}
		case "X2":
			z.X2, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X2")
				return
			}
		case "Y1":
			z.Y1, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y1")
				return
			}
		case "Y2":
			z.Y2, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y2")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Rect) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "C"
	err = en.Append(0x85, 0xa1, 0x43)
	if err != nil {
		return
	}
	if z.C == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Lol"
		err = en.Append(0x81, 0xa3, 0x4c, 0x6f, 0x6c)
		if err != nil {
			return
		}
		err = en.WriteString(z.C.Lol)
		if err != nil {
			err = msgp.WrapError(err, "C", "Lol")
			return
		}
	}
	// write "X1"
	err = en.Append(0xa2, 0x58, 0x31)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.X1)
	if err != nil {
		err = msgp.WrapError(err, "X1")
		return
	}
	// write "X2"
	err = en.Append(0xa2, 0x58, 0x32)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.X2)
	if err != nil {
		err = msgp.WrapError(err, "X2")
		return
	}
	// write "Y1"
	err = en.Append(0xa2, 0x59, 0x31)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Y1)
	if err != nil {
		err = msgp.WrapError(err, "Y1")
		return
	}
	// write "Y2"
	err = en.Append(0xa2, 0x59, 0x32)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Y2)
	if err != nil {
		err = msgp.WrapError(err, "Y2")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Rect) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "C"
	o = append(o, 0x85, 0xa1, 0x43)
	if z.C == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Lol"
		o = append(o, 0x81, 0xa3, 0x4c, 0x6f, 0x6c)
		o = msgp.AppendString(o, z.C.Lol)
	}
	// string "X1"
	o = append(o, 0xa2, 0x58, 0x31)
	o = msgp.AppendFloat32(o, z.X1)
	// string "X2"
	o = append(o, 0xa2, 0x58, 0x32)
	o = msgp.AppendFloat32(o, z.X2)
	// string "Y1"
	o = append(o, 0xa2, 0x59, 0x31)
	o = msgp.AppendFloat32(o, z.Y1)
	// string "Y2"
	o = append(o, 0xa2, 0x59, 0x32)
	o = msgp.AppendFloat32(o, z.Y2)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Rect) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "C":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.C = nil
			} else {
				if z.C == nil {
					z.C = new(Char)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "C")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "C")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Lol":
						z.C.Lol, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "C", "Lol")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "C")
							return
						}
					}
				}
			}
		case "X1":
			z.X1, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X1")
				return
			}
		case "X2":
			z.X2, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X2")
				return
			}
		case "Y1":
			z.Y1, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y1")
				return
			}
		case "Y2":
			z.Y2, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y2")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Rect) Msgsize() (s int) {
	s = 1 + 2
	if z.C == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.C.Lol)
	}
	s += 3 + msgp.Float32Size + 3 + msgp.Float32Size + 3 + msgp.Float32Size + 3 + msgp.Float32Size
	return
}
