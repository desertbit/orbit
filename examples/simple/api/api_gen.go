/* code generated by orbit */
package api

import (
	"errors"
	"net"
	"time"

	"github.com/desertbit/orbit/internal/control"
	"github.com/desertbit/orbit/internal/packet"
	"github.com/desertbit/orbit/pkg/orbit"
)

//##############//
//### Errors ###//
//##############//

const (
	ErrCodeNotFound            = 1
	ErrCodeDatasetDoesNotExist = 2
)

var (
	ErrNotFound      = errors.New("not found")
	orbitErrNotFound = control.Err(
		ErrNotFound,
		ErrNotFound.Error(),
		ErrCodeNotFound,
	)

	ErrDatasetDoesNotExist      = errors.New("dataset does not exist")
	orbitErrDatasetDoesNotExist = control.Err(
		ErrDatasetDoesNotExist,
		ErrDatasetDoesNotExist.Error(),
		ErrCodeDatasetDoesNotExist,
	)
)

//#############//
//### Types ###//
//#############//

type Char struct {
	lol string
}

type Plate struct {
	name    string
	rect    *Rect
	test    map[int]*Rect
	test2   []*Rect
	test3   []float32
	test4   map[string]map[int][]*Rect
	ts      time.Time
	version int
}

type Rect struct {
	c  *Char
	x1 float32
	x2 float32
	y1 float32
	y2 float32
}

type Test3Args struct {
	c map[int][]*Rect
	i int
	v float64
}

type Test3Ret struct {
	lol string
}

//################//
//### Services ###//
//################//

// Example  ---------------------
const (
	ExampleTest   = "ExampleTest"
	ExampleTest2  = "ExampleTest2"
	ExampleTest3  = "ExampleTest3"
	ExampleTest4  = "ExampleTest4"
	ExampleHello  = "ExampleHello"
	ExampleHello2 = "ExampleHello2"
	ExampleHello3 = "ExampleHello3"
	ExampleHello4 = "ExampleHello4"
)

type ExampleConsumerCaller interface {
	// Calls
	Test(args *Plate) (ret *Rect, err error)
	Test2(args *Rect) (err error)
	// Streams
	Hello() (conn net.Conn, err error)
	Hello2(args <-chan *Char) (err error)
}
type ExampleConsumerHandler interface {
	// Calls
	Test3(args *Test3Args) (ret *Test3Ret, err error)
	Test4() (ret *Rect, err error)
	// Streams
	Hello3() (ret <-chan *Plate, err error)
	Hello4(args <-chan *Char) (ret <-chan *Plate, err error)
}
type ExampleProviderCaller interface {
	// Calls
	Test3(args *Test3Args) (ret *Test3Ret, err error)
	Test4() (ret *Rect, err error)
	// Streams
	Hello3() (ret <-chan *Plate, err error)
	Hello4(args <-chan *Char) (ret <-chan *Plate, err error)
}
type ExampleProviderHandler interface {
	// Calls
	Test(args *Plate) (ret *Rect, err error)
	Test2(args *Rect) (err error)
	// Streams
	Hello() (conn net.Conn, err error)
	Hello2(args <-chan *Char) (err error)
}
type exampleConsumer struct {
	h     ExampleConsumerHandler
	os    *orbit.Session
	ctrls [2]*control.Control
}

func (v1 *exampleConsumer) Test(args *Plate) (ret *Rect, err error) {
	ctx, err := v1.ctrls[0].Call(ExampleTest, args)
	if err != nil {
		var cErr *control.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = ctx.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleConsumer) Test2(args *Rect) (err error) {
	_, err = v1.ctrls[1].Call(ExampleTest2, args)
	if err != nil {
		var cErr *control.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	return
}

func (v1 *exampleConsumer) test3(ctx *control.Context) (v interface{}, err error) {
	var args *Test3Args
	err = ctx.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.Test3(args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	v = ret
	return
}

func (v1 *exampleConsumer) test4(ctx *control.Context) (v interface{}, err error) {
	ret, err := v1.h.Test4()
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	v = ret
	return
}

func (v1 *exampleConsumer) Hello() (conn net.Conn, err error) {
	return v1.os.OpenStream(ExampleHello)
}

func (v1 *exampleConsumer) Hello2(args <-chan *Char) (err error) {
	conn, err := v1.os.OpenStream(ExampleHello2)
	if err != nil {
		return
	}
}

type exampleProvider struct {
	h     ExampleProviderHandler
	os    *orbit.Session
	ctrls [2]*control.Control
}

func (v1 *exampleProvider) Test3(args *Test3Args) (ret *Test3Ret, err error) {
	ctx, err := v1.ctrls[0].Call(ExampleTest3, args)
	if err != nil {
		var cErr *control.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = ctx.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleProvider) Test4() (ret *Rect, err error) {
	ctx, err := v1.ctrls[1].Call(ExampleTest4, nil)
	if err != nil {
		var cErr *control.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = ctx.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleProvider) test(ctx *control.Context) (v interface{}, err error) {
	var args *Plate
	err = ctx.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.Test(args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	v = ret
	return
}

func (v1 *exampleProvider) test2(ctx *control.Context) (v interface{}, err error) {
	var args *Rect
	err = ctx.Decode(args)
	if err != nil {
		return
	}
	err = v1.h.Test2(args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	return
}

func (v1 *exampleProvider) Hello3() (ret <-chan *Plate, err error) {
	conn, err := v1.os.OpenStream(ExampleHello3)
	if err != nil {
		return
	}
}

func (v1 *exampleProvider) Hello4(args <-chan *Char) (ret <-chan *Plate, err error) {
	conn, err := v1.os.OpenStream(ExampleHello4)
	if err != nil {
		return
	}

	go func() {
		closingChan := v1.os.ClosingChan()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args:
				err = packet.WriteEncode(conn, arg, v1.os.Codec(), 1024*1024, 30*time.Second)
				if err != nil && !v1.os.IsClosing() {
					v1.os.Log().Error().Err(err).Str("channel", ExampleHello4).Msg("writing packet")
				}
			}
		}
	}()

	retChan := make(chan *Plate)
	ret = retChan
	go func() {
		closingChan := v1.os.ClosingChan()
		for {
			select {
			case <-closingChan:
				return
			default:
				var data *Plate
				err = packet.ReadDecode(conn, data, v1.os.Codec(), 1024*1024, 30*time.Second)
				if err != nil && !v1.os.IsClosing() {
					v1.os.Log().Error().Err(err).Str("channel", ExampleHello4).Msg("reading packet")
				}
				select {
				case <-closingChan:
					return
				case retChan <- data:
				}
			}
		}
	}()
	return
}

// ---------------------
