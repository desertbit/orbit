/* code generated by orbit */
package api

import (
	"net"
	"time"
)

//#############//
//### Types ###//
//#############//

type Char struct {
	lol string
}

type Plate struct {
	name    string
	rect    *Rect
	test    map[int]*Rect
	test2   []*Rect
	test3   []float32
	test4   map[string]map[int][]*Rect
	ts      time.Time
	version int
}

type Rect struct {
	c  *Char
	x1 float32
	x2 float32
	y1 float32
	y2 float32
}

type Test2Args struct {
	c map[int][]*Rect
	i int
	v float64
}

type Test2Ret struct {
	lol string
}

//################//
//### Services ###//
//################//

// Example ---------------------
type ExampleConsumerCaller interface {
	// Calls
	Test(args *Plate) (ret *Rect, err error)
	// Streams
	Hello(conn net.Conn) (err error)
}

type ExampleConsumerHandler interface {
	// Calls
	Test2(args *Test2Args) (ret *Test2Ret, err error)
	// Streams
	Hello2(conn net.Conn) (err error)
}

type ExampleProviderCaller interface {
	// Calls
	Test2(args *Test2Args) (ret *Test2Ret, err error)
	// Streams
	Hello2(conn net.Conn) (err error)
}

type ExampleProviderHandler interface {
	// Calls
	Test(args *Plate) (ret *Rect, err error)
	// Streams
	Hello(conn net.Conn) (err error)
}

type exampleConsumerCaller struct {
	h ExampleConsumerHandler
}

func (v1 *exampleConsumerCaller) Test(args *Plate) (ret *Rect, err error) {
	return
}

type exampleProviderCaller struct {
	h ExampleProviderHandler
}

func (v1 *exampleProviderCaller) Test2(args *Test2Args) (ret *Test2Ret, err error) {
	return
}

// ---------------------
