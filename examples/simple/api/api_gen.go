/* code generated by orbit */
package api

import (
	"context"
	"errors"
	"time"

	"github.com/desertbit/orbit/pkg/orbit"
)

//##############//
//### Errors ###//
//##############//

const (
	ErrCodeErrBencherTaskDoesNotExist = 1
)

var (
	ErrErrBencherTaskDoesNotExist      = errors.New("err bencher task does not exist")
	orbitErrErrBencherTaskDoesNotExist = orbit.Err(ErrErrBencherTaskDoesNotExist, ErrErrBencherTaskDoesNotExist.Error(), ErrCodeErrBencherTaskDoesNotExist)
)

//#############//
//### Types ###//
//#############//

type BencherTask struct {
	Created       time.Time
	DatasetID     string
	Error         string
	GpuIDs        []int
	Id            string
	ModelID       int
	Progress      float32
	StatusHistory []*BencherTaskStatus
	WorkerID      int
}

type BencherTaskStatus struct {
	Status    int
	Timestamp time.Time
}

type DeleteBencherTaskArgs struct {
	Id string
}

type DeleteBencherTasksArgs struct {
	Statuses []int
}

type GetBencherTaskArgs struct {
	Id string
}

type GetBencherTaskIDsRet struct {
	Ids []string
}

type GetBencherTasks struct {
}

type GetBencherTasksRet struct {
	Tasks []*BencherTask
}

type StartBencherTaskArgs struct {
	DatasetID string
	GpuIDs    []int
	ModelID   int
	ModelType string
	NumCPU    int
	WorkerID  int
}

//################//
//### Services ###//
//################//

// Bencher  ---------------------
const (
	Bencher                 = "Bencher"
	BencherDeleteTask       = "DeleteTask"
	BencherDeleteTasks      = "DeleteTasks"
	BencherGetTask          = "GetTask"
	BencherGetTaskIDs       = "GetTaskIDs"
	BencherGetTasks         = "GetTasks"
	BencherStartBencherTask = "StartBencherTask"
)

type BencherConsumerCaller interface {
	// Calls
	DeleteTask(ctx context.Context, args *DeleteBencherTaskArgs) (err error)
	DeleteTasks(ctx context.Context, args *DeleteBencherTasksArgs) (err error)
	GetTask(ctx context.Context, args *GetBencherTaskArgs) (ret *BencherTask, err error)
	GetTaskIDs(ctx context.Context) (ret *GetBencherTaskIDsRet, err error)
	GetTasks(ctx context.Context) (ret *GetBencherTasks, err error)
	StartBencherTask(ctx context.Context) (err error)
	// Streams
}

type BencherConsumerHandler interface {
	// Calls
	// Streams
}

type BencherProviderCaller interface {
	// Calls
	// Streams
}

type BencherProviderHandler interface {
	// Calls
	DeleteTask(ctx context.Context, s *orbit.Session, args *DeleteBencherTaskArgs) (err error)
	DeleteTasks(ctx context.Context, s *orbit.Session, args *DeleteBencherTasksArgs) (err error)
	GetTask(ctx context.Context, s *orbit.Session, args *GetBencherTaskArgs) (ret *BencherTask, err error)
	GetTaskIDs(ctx context.Context, s *orbit.Session) (ret *GetBencherTaskIDsRet, err error)
	GetTasks(ctx context.Context, s *orbit.Session) (ret *GetBencherTasks, err error)
	StartBencherTask(ctx context.Context, s *orbit.Session) (err error)
	// Streams
}

type bencherConsumer struct {
	h BencherConsumerHandler
	s *orbit.Session
}

func RegisterBencherConsumer(s *orbit.Session, h BencherConsumerHandler) BencherConsumerCaller {
	cc := &bencherConsumer{h: h, s: s}
	return cc
}

func (v1 *bencherConsumer) DeleteTask(ctx context.Context, args *DeleteBencherTaskArgs) (err error) {
	_, err = v1.s.Call(ctx, Bencher, BencherDeleteTask, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	return
}

func (v1 *bencherConsumer) DeleteTasks(ctx context.Context, args *DeleteBencherTasksArgs) (err error) {
	_, err = v1.s.Call(ctx, Bencher, BencherDeleteTasks, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	return
}

func (v1 *bencherConsumer) GetTask(ctx context.Context, args *GetBencherTaskArgs) (ret *BencherTask, err error) {
	retData, err := v1.s.Call(ctx, Bencher, BencherGetTask, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *bencherConsumer) GetTaskIDs(ctx context.Context) (ret *GetBencherTaskIDsRet, err error) {
	retData, err := v1.s.Call(ctx, Bencher, BencherGetTaskIDs, nil)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *bencherConsumer) GetTasks(ctx context.Context) (ret *GetBencherTasks, err error) {
	retData, err := v1.s.Call(ctx, Bencher, BencherGetTasks, nil)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *bencherConsumer) StartBencherTask(ctx context.Context) (err error) {
	_, err = v1.s.Call(ctx, Bencher, BencherStartBencherTask, nil)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrErrBencherTaskDoesNotExist
			}
		}
		return
	}
	return
}

type bencherProvider struct {
	h BencherProviderHandler
	s *orbit.Session
}

func RegisterBencherProvider(s *orbit.Session, h BencherProviderHandler) BencherProviderCaller {
	cc := &bencherProvider{h: h, s: s}
	s.RegisterCall(Bencher, BencherDeleteTask, cc.deleteTask)
	s.RegisterCall(Bencher, BencherDeleteTasks, cc.deleteTasks)
	s.RegisterCall(Bencher, BencherGetTask, cc.getTask)
	s.RegisterCall(Bencher, BencherGetTaskIDs, cc.getTaskIDs)
	s.RegisterCall(Bencher, BencherGetTasks, cc.getTasks)
	s.RegisterCall(Bencher, BencherStartBencherTask, cc.startBencherTask)
	return cc
}

func (v1 *bencherProvider) deleteTask(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *DeleteBencherTaskArgs
	err = ad.Decode(args)
	if err != nil {
		return
	}
	err = v1.h.DeleteTask(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	return
}

func (v1 *bencherProvider) deleteTasks(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *DeleteBencherTasksArgs
	err = ad.Decode(args)
	if err != nil {
		return
	}
	err = v1.h.DeleteTasks(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	return
}

func (v1 *bencherProvider) getTask(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *GetBencherTaskArgs
	err = ad.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.GetTask(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *bencherProvider) getTaskIDs(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	ret, err := v1.h.GetTaskIDs(ctx, s)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *bencherProvider) getTasks(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	ret, err := v1.h.GetTasks(ctx, s)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *bencherProvider) startBencherTask(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	err = v1.h.StartBencherTask(ctx, s)
	if err != nil {
		if errors.Is(err, ErrErrBencherTaskDoesNotExist) {
			err = orbitErrErrBencherTaskDoesNotExist
		}
		return
	}
	return
}

// ---------------------
