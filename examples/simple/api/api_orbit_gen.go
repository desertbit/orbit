/* code generated by orbit */
package api

import (
	"context"
	"errors"
	"github.com/desertbit/closer/v3"
	"github.com/desertbit/orbit/internal/packet"
	"github.com/desertbit/orbit/pkg/orbit"
	"net"
	"sync"
	"time"
)

var (
	_ context.Context
	_ = errors.New("")
	_ net.Conn
	_ time.Time
	_ sync.Locker
	_ orbit.Conn
	_ = packet.MaxSize
	_ closer.Closer
)

//##############//
//### Errors ###//
//##############//

const (
	ErrCodeNotFound            = 1
	ErrCodeDatasetDoesNotExist = 2
)

var (
	ErrNotFound                 = errors.New("not found")
	orbitErrNotFound            = orbit.Err(ErrNotFound, ErrNotFound.Error(), ErrCodeNotFound)
	ErrDatasetDoesNotExist      = errors.New("dataset does not exist")
	orbitErrDatasetDoesNotExist = orbit.Err(ErrDatasetDoesNotExist, ErrDatasetDoesNotExist.Error(), ErrCodeDatasetDoesNotExist)
)

//#############//
//### Types ###//
//#############//

type Char struct {
	Lol string
}

type ExampleChar struct {
	Lol string
}

//msgp:ignore ExampleCharWriteChan
type ExampleCharWriteChan struct {
	closer.Closer
	C   chan<- *ExampleChar
	c   chan *ExampleChar
	mx  sync.Mutex
	err error
}

func newExampleCharWriteChan(cl closer.Closer) *ExampleCharWriteChan {
	c := &ExampleCharWriteChan{Closer: cl, c: make(chan *ExampleChar, 3)}
	c.C = c.c
	return c
}

func (c *ExampleCharWriteChan) setError(err error) {
	c.mx.Lock()
	c.err = err
	c.mx.Unlock()
	c.Close_()
}

func (c *ExampleCharWriteChan) Err() (err error) {
	c.mx.Lock()
	err = c.err
	c.mx.Unlock()
	return
}

//msgp:ignore ExampleCharReadChan
type ExampleCharReadChan struct {
	closer.Closer
	C   <-chan *ExampleChar
	c   chan *ExampleChar
	mx  sync.Mutex
	err error
}

func newExampleCharReadChan(cl closer.Closer) *ExampleCharReadChan {
	c := &ExampleCharReadChan{Closer: cl, c: make(chan *ExampleChar, 3)}
	c.C = c.c
	return c
}

func (c *ExampleCharReadChan) setError(err error) {
	c.mx.Lock()
	c.err = err
	c.mx.Unlock()
	c.Close_()
}

func (c *ExampleCharReadChan) Err() (err error) {
	c.mx.Lock()
	err = c.err
	c.mx.Unlock()
	return
}

type ExampleTest3Args struct {
	C map[int][]*Rect
	I int
	V float64
}

type ExampleTest3Ret struct {
	Lol string
}

type Plate struct {
	Name    string
	Rect    *Rect
	Test    map[int]*Rect
	Test2   []*Rect
	Test3   []float32
	Test4   map[string]map[int][]*Rect
	Ts      time.Time
	Version int
}

type Rect struct {
	C  *Char
	X1 float32
	X2 float32
	Y1 float32
	Y2 float32
}

//################//
//### Services ###//
//################//

// Example  ---------------------
const (
	Example       = "Example"
	ExampleTest   = "Test"
	ExampleTest2  = "Test2"
	ExampleTest3  = "Test3"
	ExampleTest4  = "Test4"
	ExampleHello  = "Hello"
	ExampleHello2 = "Hello2"
	ExampleHello3 = "Hello3"
	ExampleHello4 = "Hello4"
)

type ExampleConsumerCaller interface {
	// Calls
	Test(ctx context.Context, args *ExamplePlate) (ret *ExampleRect, err error)
	Test2(ctx context.Context, args *ExampleRect) (err error)
	// Streams
	Hello(ctx context.Context) (stream net.Conn, err error)
	Hello2(ctx context.Context) (args *ExampleCharWriteChan, err error)
}

type ExampleConsumerHandler interface {
	// Calls
	Test3(ctx context.Context, s *orbit.Session, args *ExampleTest3Args) (ret *ExampleTest3Ret, err error)
	Test4(ctx context.Context, s *orbit.Session) (ret *ExampleRect, err error)
	// Streams
	Hello3(s *orbit.Session, ret *ExamplePlateWriteChan) (err error)
	Hello4(s *orbit.Session, args *ExampleCharReadChan, ret *ExamplePlateWriteChan) (err error)
}

type ExampleProviderCaller interface {
	// Calls
	Test3(ctx context.Context, args *ExampleTest3Args) (ret *ExampleTest3Ret, err error)
	Test4(ctx context.Context) (ret *ExampleRect, err error)
	// Streams
	Hello3(ctx context.Context) (ret *ExamplePlateReadChan, err error)
	Hello4(ctx context.Context) (args *ExampleCharWriteChan, ret *ExamplePlateReadChan, err error)
}

type ExampleProviderHandler interface {
	// Calls
	Test(ctx context.Context, s *orbit.Session, args *ExamplePlate) (ret *ExampleRect, err error)
	Test2(ctx context.Context, s *orbit.Session, args *ExampleRect) (err error)
	// Streams
	Hello(s *orbit.Session, stream net.Conn) (err error)
	Hello2(s *orbit.Session, args *ExampleCharReadChan) (err error)
}

type exampleConsumer struct {
	h ExampleConsumerHandler
	s *orbit.Session
}

func RegisterExampleConsumer(s *orbit.Session, h ExampleConsumerHandler) ExampleConsumerCaller {
	cc := &exampleConsumer{h: h, s: s}
	s.RegisterCall(Example, ExampleTest3, cc.test3)
	s.RegisterCall(Example, ExampleTest4, cc.test4)
	s.RegisterStream(Example, ExampleHello3, cc.hello3)
	s.RegisterStream(Example, ExampleHello4, cc.hello4)
	return cc
}

func (v1 *exampleConsumer) Test(ctx context.Context, args *ExamplePlate) (ret *ExampleRect, err error) {
	retData, err := v1.s.Call(ctx, Example, ExampleTest, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleConsumer) Test2(ctx context.Context, args *ExampleRect) (err error) {
	_, err = v1.s.CallAsync(ctx, Example, ExampleTest2, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	return
}

func (v1 *exampleConsumer) test3(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *ExampleTest3Args
	err = ad.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.Test3(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *exampleConsumer) test4(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	ret, err := v1.h.Test4(ctx, s)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *exampleConsumer) Hello(ctx context.Context) (stream net.Conn, err error) {
	return v1.s.OpenStream(ctx, Example, ExampleHello)
}

func (v1 *exampleConsumer) Hello2(ctx context.Context) (args *ExampleCharWriteChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Example, ExampleHello2)
	if err != nil {
		return
	}
	args = newExampleCharWriteChan(v1.s.CloserOneWay())
	args.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args.c:
				err := packet.WriteEncode(stream, arg, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					args.setError(err)
					return
				}
			}
		}
	}()
	return
}

func (v1 *exampleConsumer) hello3(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	ret := newExamplePlateWriteChan(v1.s.CloserOneWay())
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case data := <-ret.c:
				err := packet.WriteEncode(stream, data, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					ret.setError(err)
					return
				}
			}
		}
	}()
	err = v1.h.Hello3(s, ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleConsumer) hello4(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	args := newExampleCharReadChan(v1.s.CloserOneWay())
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			var arg *ExampleChar
			err := packet.ReadDecode(stream, arg, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				args.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case args.c <- arg:
			}
		}
	}()

	ret := newExamplePlateWriteChan(v1.s.CloserOneWay())
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case data := <-ret.c:
				err := packet.WriteEncode(stream, data, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					ret.setError(err)
					return
				}
			}
		}
	}()
	err = v1.h.Hello4(s, args, ret)
	if err != nil {
		return
	}
	return
}

type exampleProvider struct {
	h ExampleProviderHandler
	s *orbit.Session
}

func RegisterExampleProvider(s *orbit.Session, h ExampleProviderHandler) ExampleProviderCaller {
	cc := &exampleProvider{h: h, s: s}
	s.RegisterCall(Example, ExampleTest, cc.test)
	s.RegisterCall(Example, ExampleTest2, cc.test2)
	s.RegisterStream(Example, ExampleHello, cc.hello)
	s.RegisterStream(Example, ExampleHello2, cc.hello2)
	return cc
}

func (v1 *exampleProvider) Test3(ctx context.Context, args *ExampleTest3Args) (ret *ExampleTest3Ret, err error) {
	retData, err := v1.s.Call(ctx, Example, ExampleTest3, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleProvider) Test4(ctx context.Context) (ret *ExampleRect, err error) {
	retData, err := v1.s.CallAsync(ctx, Example, ExampleTest4, nil)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleProvider) test(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *ExamplePlate
	err = ad.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.Test(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *exampleProvider) test2(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *ExampleRect
	err = ad.Decode(args)
	if err != nil {
		return
	}
	err = v1.h.Test2(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	return
}

func (v1 *exampleProvider) Hello3(ctx context.Context) (ret *ExamplePlateReadChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Example, ExampleHello3)
	if err != nil {
		return
	}
	ret = newExamplePlateReadChan(v1.s.CloserOneWay())
	ret.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			var data *ExamplePlate
			err := packet.ReadDecode(stream, data, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				ret.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case ret.c <- data:
			}
		}
	}()
	return
}

func (v1 *exampleProvider) Hello4(ctx context.Context) (args *ExampleCharWriteChan, ret *ExamplePlateReadChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Example, ExampleHello4)
	if err != nil {
		return
	}
	args = newExampleCharWriteChan(v1.s.CloserOneWay())
	args.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args.c:
				err := packet.WriteEncode(stream, arg, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					args.setError(err)
					return
				}
			}
		}
	}()
	ret = newExamplePlateReadChan(v1.s.CloserOneWay())
	ret.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			var data *ExamplePlate
			err := packet.ReadDecode(stream, data, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				ret.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case ret.c <- data:
			}
		}
	}()
	return
}

func (v1 *exampleProvider) hello(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	err = v1.h.Hello(s, stream)
	if err != nil {
		return
	}
	return
}

func (v1 *exampleProvider) hello2(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	args := newExampleCharReadChan(v1.s.CloserOneWay())
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			var arg *ExampleChar
			err := packet.ReadDecode(stream, arg, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				args.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case args.c <- arg:
			}
		}
	}()

	err = v1.h.Hello2(s, args)
	if err != nil {
		return
	}
	return
}

// ---------------------

// Trainer  ---------------------
const (
	Trainer         = "Trainer"
	TrainerStart    = "Start"
	TrainerUpdate   = "Update"
	TrainerUpload   = "Upload"
	TrainerDownload = "Download"
	TrainerSend     = "Send"
	TrainerReceive  = "Receive"
	TrainerLink     = "Link"
)

type TrainerConsumerCaller interface {
	// Calls
	Start(ctx context.Context, args *TrainerPlate) (err error)
	Update(ctx context.Context, args *TrainerChar) (ret *TrainerChar, err error)
	// Streams
	Upload(ctx context.Context) (stream net.Conn, err error)
	Download(ctx context.Context) (args *TrainerCharWriteChan, err error)
}

type TrainerConsumerHandler interface {
	// Streams
	Send(s *orbit.Session, args *TrainerPlateReadChan) (err error)
	Receive(s *orbit.Session, ret *TrainerCharWriteChan) (err error)
	Link(s *orbit.Session, args *TrainerPlateReadChan, ret *TrainerCharWriteChan) (err error)
}

type TrainerProviderCaller interface {
	// Streams
	Send(ctx context.Context) (args *TrainerPlateWriteChan, err error)
	Receive(ctx context.Context) (ret *TrainerCharReadChan, err error)
	Link(ctx context.Context) (args *TrainerPlateWriteChan, ret *TrainerCharReadChan, err error)
}

type TrainerProviderHandler interface {
	// Calls
	Start(ctx context.Context, s *orbit.Session, args *TrainerPlate) (err error)
	Update(ctx context.Context, s *orbit.Session, args *TrainerChar) (ret *TrainerChar, err error)
	// Streams
	Upload(s *orbit.Session, stream net.Conn) (err error)
	Download(s *orbit.Session, args *TrainerCharReadChan) (err error)
}

type trainerConsumer struct {
	h TrainerConsumerHandler
	s *orbit.Session
}

func RegisterTrainerConsumer(s *orbit.Session, h TrainerConsumerHandler) TrainerConsumerCaller {
	cc := &trainerConsumer{h: h, s: s}
	s.RegisterStream(Trainer, TrainerSend, cc.send)
	s.RegisterStream(Trainer, TrainerReceive, cc.receive)
	s.RegisterStream(Trainer, TrainerLink, cc.link)
	return cc
}

func (v1 *trainerConsumer) Start(ctx context.Context, args *TrainerPlate) (err error) {
	_, err = v1.s.Call(ctx, Trainer, TrainerStart, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	return
}

func (v1 *trainerConsumer) Update(ctx context.Context, args *TrainerChar) (ret *TrainerChar, err error) {
	retData, err := v1.s.CallAsync(ctx, Trainer, TrainerUpdate, args)
	if err != nil {
		var cErr *orbit.ErrorCode
		if errors.As(err, &cErr) {
			switch cErr.Code {
			case 1:
				err = ErrNotFound
			case 2:
				err = ErrDatasetDoesNotExist
			}
		}
		return
	}
	err = retData.Decode(ret)
	if err != nil {
		return
	}
	return
}

func (v1 *trainerConsumer) Upload(ctx context.Context) (stream net.Conn, err error) {
	return v1.s.OpenStream(ctx, Trainer, TrainerUpload)
}

func (v1 *trainerConsumer) Download(ctx context.Context) (args *TrainerCharWriteChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Trainer, TrainerDownload)
	if err != nil {
		return
	}
	args = newTrainerCharWriteChan(v1.s.CloserOneWay())
	args.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args.c:
				err := packet.WriteEncode(stream, arg, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					args.setError(err)
					return
				}
			}
		}
	}()
	return
}

func (v1 *trainerConsumer) send(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	args := newTrainerPlateReadChan(v1.s.CloserOneWay())
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			var arg *TrainerPlate
			err := packet.ReadDecode(stream, arg, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				args.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case args.c <- arg:
			}
		}
	}()

	err = v1.h.Send(s, args)
	if err != nil {
		return
	}
	return
}

func (v1 *trainerConsumer) receive(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	ret := newTrainerCharWriteChan(v1.s.CloserOneWay())
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case data := <-ret.c:
				err := packet.WriteEncode(stream, data, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					ret.setError(err)
					return
				}
			}
		}
	}()
	err = v1.h.Receive(s, ret)
	if err != nil {
		return
	}
	return
}

func (v1 *trainerConsumer) link(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	args := newTrainerPlateReadChan(v1.s.CloserOneWay())
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			var arg *TrainerPlate
			err := packet.ReadDecode(stream, arg, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				args.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case args.c <- arg:
			}
		}
	}()

	ret := newTrainerCharWriteChan(v1.s.CloserOneWay())
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case data := <-ret.c:
				err := packet.WriteEncode(stream, data, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					ret.setError(err)
					return
				}
			}
		}
	}()
	err = v1.h.Link(s, args, ret)
	if err != nil {
		return
	}
	return
}

type trainerProvider struct {
	h TrainerProviderHandler
	s *orbit.Session
}

func RegisterTrainerProvider(s *orbit.Session, h TrainerProviderHandler) TrainerProviderCaller {
	cc := &trainerProvider{h: h, s: s}
	s.RegisterCall(Trainer, TrainerStart, cc.start)
	s.RegisterCall(Trainer, TrainerUpdate, cc.update)
	s.RegisterStream(Trainer, TrainerUpload, cc.upload)
	s.RegisterStream(Trainer, TrainerDownload, cc.download)
	return cc
}

func (v1 *trainerProvider) start(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *TrainerPlate
	err = ad.Decode(args)
	if err != nil {
		return
	}
	err = v1.h.Start(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	return
}

func (v1 *trainerProvider) update(ctx context.Context, s *orbit.Session, ad *orbit.Data) (r interface{}, err error) {
	var args *TrainerChar
	err = ad.Decode(args)
	if err != nil {
		return
	}
	ret, err := v1.h.Update(ctx, s, args)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			err = orbitErrNotFound
		} else if errors.Is(err, ErrDatasetDoesNotExist) {
			err = orbitErrDatasetDoesNotExist
		}
		return
	}
	r = ret
	return
}

func (v1 *trainerProvider) Send(ctx context.Context) (args *TrainerPlateWriteChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Trainer, TrainerSend)
	if err != nil {
		return
	}
	args = newTrainerPlateWriteChan(v1.s.CloserOneWay())
	args.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args.c:
				err := packet.WriteEncode(stream, arg, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					args.setError(err)
					return
				}
			}
		}
	}()
	return
}

func (v1 *trainerProvider) Receive(ctx context.Context) (ret *TrainerCharReadChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Trainer, TrainerReceive)
	if err != nil {
		return
	}
	ret = newTrainerCharReadChan(v1.s.CloserOneWay())
	ret.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			var data *TrainerChar
			err := packet.ReadDecode(stream, data, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				ret.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case ret.c <- data:
			}
		}
	}()
	return
}

func (v1 *trainerProvider) Link(ctx context.Context) (args *TrainerPlateWriteChan, ret *TrainerCharReadChan, err error) {
	stream, err := v1.s.OpenStream(ctx, Trainer, TrainerLink)
	if err != nil {
		return
	}
	args = newTrainerPlateWriteChan(v1.s.CloserOneWay())
	args.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			select {
			case <-closingChan:
				return
			case arg := <-args.c:
				err := packet.WriteEncode(stream, arg, codec)
				if err != nil {
					if v1.s.IsClosing() {
						err = nil
					}
					args.setError(err)
					return
				}
			}
		}
	}()
	ret = newTrainerCharReadChan(v1.s.CloserOneWay())
	ret.OnClosing(func() error { return stream.Close() })
	go func() {
		closingChan := ret.ClosingChan()
		codec := v1.s.Codec()
		for {
			var data *TrainerChar
			err := packet.ReadDecode(stream, data, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				ret.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case ret.c <- data:
			}
		}
	}()
	return
}

func (v1 *trainerProvider) upload(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	err = v1.h.Upload(s, stream)
	if err != nil {
		return
	}
	return
}

func (v1 *trainerProvider) download(s *orbit.Session, stream net.Conn) (err error) {
	defer stream.Close()
	args := newTrainerCharReadChan(v1.s.CloserOneWay())
	go func() {
		closingChan := args.ClosingChan()
		codec := v1.s.Codec()
		for {
			var arg *TrainerChar
			err := packet.ReadDecode(stream, arg, codec)
			if err != nil {
				if v1.s.IsClosing() {
					err = nil
				}
				args.setError(err)
				return
			}
			select {
			case <-closingChan:
				return
			case args.c <- arg:
			}
		}
	}()

	err = v1.h.Download(s, args)
	if err != nil {
		return
	}
	return
}

// ---------------------
